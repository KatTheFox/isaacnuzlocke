--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____errors = require("errors")
local getUpgradeErrorMsg = ____errors.getUpgradeErrorMsg
local ____main = require("features.saveDataManager.main")
local saveDataManager = ____main.saveDataManager
local v, isActionPressed, isActionTriggered, getActionValue, getReturnValue
function isActionPressed(self, _entity, _inputHook, buttonAction)
    return getReturnValue(nil, buttonAction, true)
end
function isActionTriggered(self, _entity, _inputHook, buttonAction)
    return getReturnValue(nil, buttonAction, true)
end
function getActionValue(self, _entity, _inputHook, buttonAction)
    return getReturnValue(nil, buttonAction, false)
end
function getReturnValue(self, buttonAction, booleanCallback)
    local disableValue = ((booleanCallback and (function() return false end)) or (function() return 0 end))()
    if not v.run.enableSomeInputs then
        return disableValue
    end
    if (v.run.whitelist ~= nil) and (not v.run.whitelist:has(buttonAction)) then
        return disableValue
    end
    if (v.run.blacklist ~= nil) and v.run.blacklist:has(buttonAction) then
        return disableValue
    end
    return nil
end
local FEATURE_NAME = "input disabler"
local MOVEMENT_BUTTONS = __TS__New(Set, {ButtonAction.ACTION_LEFT, ButtonAction.ACTION_RIGHT, ButtonAction.ACTION_UP, ButtonAction.ACTION_DOWN})
local SHOOTING_BUTTONS = __TS__New(Set, {ButtonAction.ACTION_SHOOTLEFT, ButtonAction.ACTION_SHOOTRIGHT, ButtonAction.ACTION_SHOOTUP, ButtonAction.ACTION_SHOOTDOWN})
local initialized = false
v = {run = {enableSomeInputs = true, whitelist = nil, blacklist = nil}}
function ____exports.init(self, mod)
    initialized = true
    saveDataManager(nil, "disableInputs", v)
    mod:AddCallback(ModCallbacks.MC_INPUT_ACTION, isActionPressed, InputHook.IS_ACTION_PRESSED)
    mod:AddCallback(ModCallbacks.MC_INPUT_ACTION, isActionTriggered, InputHook.IS_ACTION_TRIGGERED)
    mod:AddCallback(ModCallbacks.MC_INPUT_ACTION, getActionValue, InputHook.GET_ACTION_VALUE)
end
function ____exports.enableAllInputs(self)
    if not initialized then
        local msg = getUpgradeErrorMsg(nil, FEATURE_NAME)
        error(msg)
    end
    v.run.enableSomeInputs = true
    v.run.whitelist = nil
    v.run.blacklist = nil
end
function ____exports.disableAllInputs(self)
    if not initialized then
        local msg = getUpgradeErrorMsg(nil, FEATURE_NAME)
        error(msg)
    end
    v.run.enableSomeInputs = false
    v.run.whitelist = nil
    v.run.blacklist = nil
end
function ____exports.enableAllInputsExceptFor(self, blacklist)
    if not initialized then
        local msg = getUpgradeErrorMsg(nil, FEATURE_NAME)
        error(msg)
    end
    v.run.enableSomeInputs = true
    v.run.whitelist = nil
    v.run.blacklist = blacklist
end
function ____exports.disableAllInputsExceptFor(self, whitelist)
    if not initialized then
        local msg = getUpgradeErrorMsg(nil, FEATURE_NAME)
        error(msg)
    end
    v.run.enableSomeInputs = true
    v.run.whitelist = whitelist
    v.run.blacklist = nil
end
function ____exports.disableMovementInputs(self)
    ____exports.enableAllInputsExceptFor(nil, MOVEMENT_BUTTONS)
end
function ____exports.disableShootingInputs(self)
    ____exports.enableAllInputsExceptFor(nil, SHOOTING_BUTTONS)
end
return ____exports
