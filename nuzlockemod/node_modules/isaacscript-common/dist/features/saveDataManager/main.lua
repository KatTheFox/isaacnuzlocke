--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____errors = require("errors")
local getUpgradeErrorMsg = ____errors.getUpgradeErrorMsg
local ____deepCopy = require("functions.deepCopy")
local deepCopy = ____deepCopy.deepCopy
local SerializationType = ____deepCopy.SerializationType
local ____util = require("functions.util")
local tableClear = ____util.tableClear
local ____SaveData = require("types.SaveData")
local SaveDataKeys = ____SaveData.SaveDataKeys
local ____load = require("features.saveDataManager.load")
local loadFromDisk = ____load.loadFromDisk
local ____save = require("features.saveDataManager.save")
local saveToDisk = ____save.saveToDisk
local FEATURE_NAME, mod, loadedDataOnThisRun, saveDataMap, saveDataDefaultsMap, saveDataConditionalFuncMap, postPlayerInit, preGameExit, postNewLevel, postNewRoom, restoreDefaultsAll, restoreDefaults, clearAndCopyAllElements
function postPlayerInit(self)
    if mod == nil then
        local msg = getUpgradeErrorMsg(nil, FEATURE_NAME)
        error(msg)
    end
    if loadedDataOnThisRun then
        return
    end
    loadedDataOnThisRun = true
    loadFromDisk(nil, mod, saveDataMap)
    local game = Game()
    local gameFrameCount = game:GetFrameCount()
    local isContinued = gameFrameCount ~= 0
    if not isContinued then
        restoreDefaultsAll(nil)
    end
end
function preGameExit(self)
    if mod == nil then
        local msg = getUpgradeErrorMsg(nil, FEATURE_NAME)
        error(msg)
    end
    saveToDisk(nil, mod, saveDataMap, saveDataConditionalFuncMap)
    restoreDefaultsAll(nil)
    loadedDataOnThisRun = false
end
function postNewLevel(self)
    restoreDefaults(nil, SaveDataKeys.Level)
end
function postNewRoom(self)
    restoreDefaults(nil, SaveDataKeys.Room)
end
function restoreDefaultsAll(self)
    restoreDefaults(nil, SaveDataKeys.Run)
    restoreDefaults(nil, SaveDataKeys.Level)
    restoreDefaults(nil, SaveDataKeys.Room)
end
function restoreDefaults(self, childTableName)
    if ((childTableName ~= SaveDataKeys.Run) and (childTableName ~= SaveDataKeys.Level)) and (childTableName ~= SaveDataKeys.Room) then
        error("Unknown child table name of: " .. childTableName)
    end
    for subscriberName, saveData in pairs(saveDataMap) do
        do
            local childTable = saveData[childTableName]
            if childTable == nil then
                goto __continue14
            end
            local saveDataDefaults = saveDataDefaultsMap[subscriberName]
            if saveDataDefaults == nil then
                error("Failed to find the default copy of the save data for subscriber: " .. subscriberName)
            end
            local childTableDefaults = saveDataDefaults[childTableName]
            if childTableDefaults == nil then
                error((("Failed to find the default copy of the child table \"" .. childTableName) .. "\" for subscriber: ") .. subscriberName)
            end
            local childTableDefaultsTable = childTableDefaults
            local childTableDefaultsTableCopy = deepCopy(nil, childTableDefaultsTable, SerializationType.NONE, (subscriberName .. " --> ") .. childTableName)
            clearAndCopyAllElements(nil, childTable, childTableDefaultsTableCopy)
        end
        ::__continue14::
    end
end
function clearAndCopyAllElements(self, oldTable, newTable)
    tableClear(nil, oldTable)
    for key, value in pairs(newTable) do
        oldTable[key] = value
    end
end
FEATURE_NAME = "save data manager"
mod = nil
loadedDataOnThisRun = false
saveDataMap = {}
saveDataDefaultsMap = {}
saveDataConditionalFuncMap = __TS__New(Map)
function ____exports.init(self, incomingMod)
    mod = incomingMod
    mod:AddCallback(ModCallbacks.MC_POST_PLAYER_INIT, postPlayerInit)
    mod:AddCallback(ModCallbacks.MC_PRE_GAME_EXIT, preGameExit)
    mod:AddCallback(ModCallbacks.MC_POST_NEW_LEVEL, postNewLevel)
    mod:AddCallback(ModCallbacks.MC_POST_NEW_ROOM, postNewRoom)
end
function ____exports.saveDataManager(self, key, saveData, conditionalFunc)
    if mod == nil then
        local msg = getUpgradeErrorMsg(nil, FEATURE_NAME)
        error(msg)
    end
    local keyType = type(key)
    if keyType ~= "string" then
        error("The save data manager requires that keys are strings. You tried to use a key of type: " .. keyType)
    end
    if saveDataMap[key] ~= nil then
        error("The save data manager is already managing save data for a key of: " .. key)
    end
    saveDataMap[key] = saveData
    local saveDataTable = saveData
    local saveDataTableCopy = deepCopy(nil, saveDataTable, SerializationType.NONE, key)
    local saveDataCopy = saveDataTableCopy
    saveDataDefaultsMap[key] = saveDataCopy
    if conditionalFunc ~= nil then
        saveDataConditionalFuncMap:set(key, conditionalFunc)
    end
end
function ____exports.saveDataManagerSave(self)
    if mod == nil then
        local msg = getUpgradeErrorMsg(nil, FEATURE_NAME)
        error(msg)
    end
    saveToDisk(nil, mod, saveDataMap, saveDataConditionalFuncMap)
end
function ____exports.saveDataManagerSetGlobal(self)
    g = saveDataMap
    gd = saveDataDefaultsMap
end
return ____exports
