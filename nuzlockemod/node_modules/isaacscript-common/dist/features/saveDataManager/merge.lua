--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____constants = require("constants")
local TSTL_OBJECT_WITH_NUMBER_KEYS_BRAND = ____constants.TSTL_OBJECT_WITH_NUMBER_KEYS_BRAND
local ____debug = require("debug")
local DEBUG = ____debug.DEBUG
local ____array = require("functions.array")
local isArray = ____array.isArray
local ____deepCopy = require("functions.deepCopy")
local addTraversalDescription = ____deepCopy.addTraversalDescription
local deepCopy = ____deepCopy.deepCopy
local deserializeVector = ____deepCopy.deserializeVector
local SerializationType = ____deepCopy.SerializationType
local ____log = require("functions.log")
local log = ____log.log
local ____util = require("functions.util")
local isSerializedVector = ____util.isSerializedVector
local tableClear = ____util.tableClear
local mergeArray, mergeTSTLObject, mergeTable, mergeVector
function ____exports.merge(self, oldObject, newTable, traversalDescription)
    local oldObjectType = type(oldObject)
    if oldObjectType ~= "table" then
        error("The first argument given to the merge function is not a table.")
    end
    local newTableType = type(newTable)
    if newTableType ~= "table" then
        error("The second argument given to the merge function is not a table.")
    end
    if DEBUG then
        log(nil, "merge is operating on: " .. traversalDescription)
    end
    if mergeArray(nil, oldObject, newTable) then
        return
    end
    if __TS__InstanceOf(oldObject, Map) or __TS__InstanceOf(oldObject, Set) then
        mergeTSTLObject(nil, oldObject, newTable, traversalDescription)
    else
        mergeTable(nil, oldObject, newTable, traversalDescription)
    end
end
function mergeArray(self, oldObject, newTable)
    local oldArray = oldObject
    if (not isArray(nil, oldArray)) or (not isArray(nil, newTable)) then
        return false
    end
    tableClear(nil, oldArray)
    for key, value in pairs(newTable) do
        oldArray[key] = value
    end
    return true
end
function mergeTSTLObject(self, oldObject, newTable, traversalDescription)
    oldObject:clear()
    local convertStringKeysToNumbers = newTable[TSTL_OBJECT_WITH_NUMBER_KEYS_BRAND] ~= nil
    for key, value in pairs(newTable) do
        do
            local keyToUse = key
            if convertStringKeysToNumbers then
                local numberKey = tonumber(key)
                if numberKey == nil then
                    goto __continue13
                end
                keyToUse = numberKey
            end
            if __TS__InstanceOf(oldObject, Map) then
                local valueType = type(value)
                local valueCopy
                if valueType == "table" then
                    valueCopy = deepCopy(nil, value, SerializationType.DESERIALIZE, traversalDescription)
                else
                    valueCopy = value
                end
                oldObject:set(keyToUse, valueCopy)
            elseif __TS__InstanceOf(oldObject, Set) then
                oldObject:add(keyToUse)
            end
        end
        ::__continue13::
    end
end
function mergeTable(self, oldTable, newTable, traversalDescription)
    for key, value in pairs(newTable) do
        if mergeVector(nil, oldTable, key, value) then
            return
        end
        local valueType = type(value)
        if valueType == "table" then
            local oldValue = oldTable[key]
            local oldValueType = type(oldValue)
            if oldValueType == "table" then
                traversalDescription = addTraversalDescription(nil, key, traversalDescription)
                ____exports.merge(nil, oldValue, value, traversalDescription)
            end
        else
            if DEBUG then
                log(
                    nil,
                    (("Merging key \"" .. tostring(key)) .. "\" with value: ") .. tostring(value)
                )
            end
            oldTable[key] = value
        end
    end
end
function mergeVector(self, oldTable, key, value)
    if not isSerializedVector(nil, value) then
        return false
    end
    local serializedVector = value
    local vector = deserializeVector(nil, serializedVector)
    oldTable[key] = vector
    return true
end
return ____exports
