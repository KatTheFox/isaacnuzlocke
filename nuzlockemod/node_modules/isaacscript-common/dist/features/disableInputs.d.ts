/// <reference types="isaac-typescript-definitions" />
import ModUpgraded from "../types/ModUpgraded";
/** @hidden */
export declare function init(mod: ModUpgraded): void;
/** After having disabled inputs, use this function to set things back to normal. */
export declare function enableAllInputs(): void;
/**
 * Helper function to disable all inputs.
 * This is useful because `EntityPlayer.ControlsEnabled` is not very reliable.
 *
 * Call `enableAllInputs()` to set things back to normal.
 *
 * Note that calling any of the various `enable` or `disable` functions will override the effects of
 * this function.
 */
export declare function disableAllInputs(): void;
/**
 * Helper function to enable all inputs besides the ones provided.
 * This is useful because `EntityPlayer.ControlsEnabled` is not very reliable.
 *
 * Call `enableAllInputs()` to set things back to normal.
 *
 * Note that calling any of the various `enable` or `disable` functions will override the effects of
 * this function.
 */
export declare function enableAllInputsExceptFor(blacklist: Set<ButtonAction>): void;
/**
 * Helper function to disable all inputs besides the ones provided.
 * This is useful because `EntityPlayer.ControlsEnabled` is not very reliable.
 *
 * Call `enableAllInputs()` to set things back to normal.
 *
 * Note that calling any of the various `enable` or `disable` functions will override the effects of
 * this function.
 */
export declare function disableAllInputsExceptFor(whitelist: Set<ButtonAction>): void;
/**
 * Helper function to disable only the inputs used for moving the character (or moving the cursor in
 * the UI).
 * This is useful because `EntityPlayer.ControlsEnabled` is not very reliable.
 *
 * Call `enableInputs()` to set things back to normal.
 *
 * Note that calling any of the various `enable` or `disable` functions will override the effects of
 * this function.
 */
export declare function disableMovementInputs(): void;
/**
 * Helper function to disable only the inputs used for shooting tears.
 * This is useful because `EntityPlayer.ControlsEnabled` is not very reliable.
 *
 * Call `enableInputs()` to set things back to normal.
 *
 * Note that calling any of the various `enable` or `disable` functions will override the effects of
 * this function.
 */
export declare function disableShootingInputs(): void;
