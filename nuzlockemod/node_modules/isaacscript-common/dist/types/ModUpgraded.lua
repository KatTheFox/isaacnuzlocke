--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local postCursedTeleport = require("callbacks.subscriptions.postCursedTeleport")
local postCustomRevive = require("callbacks.subscriptions.postCustomRevive")
local postEsauJr = require("callbacks.subscriptions.postEsauJr")
local postFirstEsauJr = require("callbacks.subscriptions.postFirstEsauJr")
local postFirstFlip = require("callbacks.subscriptions.postFirstFlip")
local postFlip = require("callbacks.subscriptions.postFlip")
local postGameStartedReordered = require("callbacks.subscriptions.postGameStartedReordered")
local postGridEntityInit = require("callbacks.subscriptions.postGridEntityInit")
local postGridEntityRemove = require("callbacks.subscriptions.postGridEntityRemove")
local postGridEntityUpdate = require("callbacks.subscriptions.postGridEntityUpdate")
local postItemPickup = require("callbacks.subscriptions.postItemPickup")
local postLaserInitLate = require("callbacks.subscriptions.postLaserInitLate")
local postNewLevelReordered = require("callbacks.subscriptions.postNewLevelReordered")
local postNewRoomReordered = require("callbacks.subscriptions.postNewRoomReordered")
local postPickupCollect = require("callbacks.subscriptions.postPickupCollect")
local postPickupInitLate = require("callbacks.subscriptions.postPickupInitLate")
local postPlayerChangeHealth = require("callbacks.subscriptions.postPlayerChangeHealth")
local postPlayerChangeType = require("callbacks.subscriptions.postPlayerChangeType")
local postPlayerFatalDamage = require("callbacks.subscriptions.postPlayerFatalDamage")
local postPlayerInitLate = require("callbacks.subscriptions.postPlayerInitLate")
local postPlayerInitReordered = require("callbacks.subscriptions.postPlayerInitReordered")
local postPlayerRenderReordered = require("callbacks.subscriptions.postPlayerRenderReordered")
local postPlayerUpdateReordered = require("callbacks.subscriptions.postPlayerUpdateReordered")
local postPurchase = require("callbacks.subscriptions.postPurchase")
local postSacrifice = require("callbacks.subscriptions.postSacrifice")
local postTransformation = require("callbacks.subscriptions.postTransformation")
local preCustomRevive = require("callbacks.subscriptions.preCustomRevive")
local preItemPickup = require("callbacks.subscriptions.preItemPickup")
local ____log = require("functions.log")
local getDebugPrependString = ____log.getDebugPrependString
local ____util = require("functions.util")
local ensureAllCases = ____util.ensureAllCases
local ____ModCallbacksCustom = require("types.ModCallbacksCustom")
local ModCallbacksCustom = ____ModCallbacksCustom.default
local getCallbackName
function getCallbackName(self, callbackID)
    for ____, ____value in ipairs(
        __TS__ObjectEntries(ModCallbacks)
    ) do
        local key
        key = ____value[1]
        local value
        value = ____value[2]
        if value == callbackID then
            return key
        end
    end
    return "MC_UNKNOWN"
end
____exports.default = (function()
    ____exports.default = __TS__Class()
    local ModUpgraded = ____exports.default
    ModUpgraded.name = "ModUpgraded"
    function ModUpgraded.prototype.____constructor(self, mod, verbose)
        self.Mod = mod
        self.Verbose = verbose
        self.Name = mod.Name
    end
    function ModUpgraded.prototype.AddCallback(self, callbackID, ...)
        local args = {...}
        if self.Verbose then
            local callback = args[1]
            local optionalArg = args[2]
            local callbackName = getCallbackName(nil, callbackID)
            local debugMsg = getDebugPrependString(nil, callbackName)
            local function callbackWithLogger(____, ...)
                Isaac.DebugString(debugMsg .. " - START")
                callback(nil, ...)
                Isaac.DebugString(debugMsg .. " - END")
            end
            self.Mod:AddCallback(callbackID, callbackWithLogger, optionalArg)
        else
            self.Mod:AddCallback(
                callbackID,
                __TS__Spread(args)
            )
        end
    end
    function ModUpgraded.prototype.HasData(self)
        return self.Mod:HasData()
    end
    function ModUpgraded.prototype.LoadData(self)
        return self.Mod:LoadData()
    end
    function ModUpgraded.prototype.RemoveCallback(self, callbackID, callback)
        self.Mod:RemoveCallback(callbackID, callback)
    end
    function ModUpgraded.prototype.RemoveData(self)
        self.Mod:RemoveData()
    end
    function ModUpgraded.prototype.SaveData(self, data)
        self.Mod:SaveData(data)
    end
    function ModUpgraded.prototype.AddCallbackCustom(self, callbackID, ...)
        local args = {...}
        local ____switch14 = callbackID
        if ____switch14 == ModCallbacksCustom.MC_POST_GAME_STARTED_REORDERED then
            goto ____switch14_case_0
        elseif ____switch14 == ModCallbacksCustom.MC_POST_NEW_LEVEL_REORDERED then
            goto ____switch14_case_1
        elseif ____switch14 == ModCallbacksCustom.MC_POST_NEW_ROOM_REORDERED then
            goto ____switch14_case_2
        elseif ____switch14 == ModCallbacksCustom.MC_POST_PLAYER_INIT_REORDERED then
            goto ____switch14_case_3
        elseif ____switch14 == ModCallbacksCustom.MC_POST_PLAYER_UPDATE_REORDERED then
            goto ____switch14_case_4
        elseif ____switch14 == ModCallbacksCustom.MC_POST_PLAYER_RENDER_REORDERED then
            goto ____switch14_case_5
        elseif ____switch14 == ModCallbacksCustom.MC_POST_PLAYER_INIT_LATE then
            goto ____switch14_case_6
        elseif ____switch14 == ModCallbacksCustom.MC_POST_PICKUP_INIT_LATE then
            goto ____switch14_case_7
        elseif ____switch14 == ModCallbacksCustom.MC_POST_LASER_INIT_LATE then
            goto ____switch14_case_8
        elseif ____switch14 == ModCallbacksCustom.MC_POST_PICKUP_COLLECT then
            goto ____switch14_case_9
        elseif ____switch14 == ModCallbacksCustom.MC_PRE_ITEM_PICKUP then
            goto ____switch14_case_10
        elseif ____switch14 == ModCallbacksCustom.MC_POST_ITEM_PICKUP then
            goto ____switch14_case_11
        elseif ____switch14 == ModCallbacksCustom.MC_POST_PLAYER_CHANGE_TYPE then
            goto ____switch14_case_12
        elseif ____switch14 == ModCallbacksCustom.MC_POST_PLAYER_CHANGE_HEALTH then
            goto ____switch14_case_13
        elseif ____switch14 == ModCallbacksCustom.MC_POST_PLAYER_FATAL_DAMAGE then
            goto ____switch14_case_14
        elseif ____switch14 == ModCallbacksCustom.MC_PRE_CUSTOM_REVIVE then
            goto ____switch14_case_15
        elseif ____switch14 == ModCallbacksCustom.MC_POST_CUSTOM_REVIVE then
            goto ____switch14_case_16
        elseif ____switch14 == ModCallbacksCustom.MC_POST_FLIP then
            goto ____switch14_case_17
        elseif ____switch14 == ModCallbacksCustom.MC_POST_FIRST_FLIP then
            goto ____switch14_case_18
        elseif ____switch14 == ModCallbacksCustom.MC_POST_ESAU_JR then
            goto ____switch14_case_19
        elseif ____switch14 == ModCallbacksCustom.MC_POST_FIRST_ESAU_JR then
            goto ____switch14_case_20
        elseif ____switch14 == ModCallbacksCustom.MC_POST_TRANSFORMATION then
            goto ____switch14_case_21
        elseif ____switch14 == ModCallbacksCustom.MC_POST_PURCHASE then
            goto ____switch14_case_22
        elseif ____switch14 == ModCallbacksCustom.MC_POST_SACRIFICE then
            goto ____switch14_case_23
        elseif ____switch14 == ModCallbacksCustom.MC_POST_CURSED_TELEPORT then
            goto ____switch14_case_24
        elseif ____switch14 == ModCallbacksCustom.MC_POST_GRID_ENTITY_INIT then
            goto ____switch14_case_25
        elseif ____switch14 == ModCallbacksCustom.MC_POST_GRID_ENTITY_UPDATE then
            goto ____switch14_case_26
        elseif ____switch14 == ModCallbacksCustom.MC_POST_GRID_ENTITY_REMOVE then
            goto ____switch14_case_27
        end
        goto ____switch14_case_default
        ::____switch14_case_0::
        do
            do
                postGameStartedReordered:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_1::
        do
            do
                postNewLevelReordered:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_2::
        do
            do
                postNewRoomReordered:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_3::
        do
            do
                postPlayerInitReordered:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_4::
        do
            do
                postPlayerUpdateReordered:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_5::
        do
            do
                postPlayerRenderReordered:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_6::
        do
            do
                postPlayerInitLate:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_7::
        do
            do
                postPickupInitLate:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_8::
        do
            do
                postLaserInitLate:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_9::
        do
            do
                postPickupCollect:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_10::
        do
            do
                preItemPickup:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_11::
        do
            do
                postItemPickup:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_12::
        do
            do
                postPlayerChangeType:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_13::
        do
            do
                postPlayerChangeHealth:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_14::
        do
            do
                postPlayerFatalDamage:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_15::
        do
            do
                preCustomRevive:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_16::
        do
            do
                postCustomRevive:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_17::
        do
            do
                postFlip:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_18::
        do
            do
                postFirstFlip:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_19::
        do
            do
                postEsauJr:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_20::
        do
            do
                postFirstEsauJr:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_21::
        do
            do
                postTransformation:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_22::
        do
            do
                postPurchase:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_23::
        do
            do
                postSacrifice:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_24::
        do
            do
                postCursedTeleport:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_25::
        do
            do
                postGridEntityInit:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_26::
        do
            do
                postGridEntityUpdate:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_27::
        do
            do
                postGridEntityRemove:register(
                    table.unpack(args)
                )
                goto ____switch14_end
            end
        end
        ::____switch14_case_default::
        do
            do
                ensureAllCases(nil, callbackID)
                error(
                    ("The custom callback ID of \"" .. tostring(callbackID)) .. "\" is not valid."
                )
            end
        end
        ::____switch14_end::
    end
    return ModUpgraded
end)()
return ____exports
