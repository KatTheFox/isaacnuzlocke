--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____random = require("functions.random")
local getRandomInt = ____random.getRandomInt
function ____exports.arrayEquals(self, array1, array2)
    if #array1 ~= #array2 then
        return false
    end
    do
        local i = 0
        while i < #array1 do
            if array1[i + 1] ~= array2[i + 1] then
                return false
            end
            i = i + 1
        end
    end
    return true
end
function ____exports.arrayEmpty(self, array)
    __TS__ArraySplice(array, 0, #array)
end
function ____exports.arraySum(self, array)
    local sum = 0
    for ____, element in ipairs(array) do
        sum = sum + element
    end
    return sum
end
function ____exports.arrayInArray(self, arrayToMatch, parentArray)
    for ____, element in ipairs(parentArray) do
        if ____exports.arrayEquals(nil, element, arrayToMatch) then
            return true
        end
    end
    return false
end
function ____exports.arrayToString(self, array)
    local strings = {}
    for ____, value in ipairs(array) do
        __TS__ArrayPush(
            strings,
            tostring(value)
        )
    end
    return ("[" .. table.concat(strings, ", " or ",")) .. "]"
end
function ____exports.getRandomArrayElement(self, array, seed)
    if #array == 0 then
        error("Failed to get a random array element since the provided array is empty.")
    end
    local randomIndex = getRandomInt(nil, 0, #array - 1, seed)
    return array[randomIndex + 1]
end
function ____exports.arrayRemove(self, array, element)
    local arrayCopy = {
        table.unpack(array)
    }
    local index = __TS__ArrayIndexOf(array, element)
    __TS__ArraySplice(arrayCopy, index, 1)
    return arrayCopy
end
function ____exports.initArray(self, defaultValue, size)
    local array = {}
    do
        local i = 0
        while i < size do
            __TS__ArrayPush(array, defaultValue)
            i = i + 1
        end
    end
    return array
end
function ____exports.isArray(self, ____table)
    local metatable = getmetatable(____table)
    if metatable ~= nil then
        return false
    end
    local numEntries = 0
    for key in pairs(____table) do
        numEntries = numEntries + 1
        local keyType = type(key)
        if keyType ~= "number" then
            return false
        end
    end
    do
        local i = 1
        while i <= numEntries do
            local element = ____table[i]
            if element == nil then
                return false
            end
            i = i + 1
        end
    end
    return true
end
return ____exports
