--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____PocketItemType = require("types.PocketItemType")
local PocketItemType = ____PocketItemType.default
local ____util = require("functions.util")
local getCollectibleSet = ____util.getCollectibleSet
local EXCLUDED_CHARACTERS
function ____exports.getPlayers(self, performExclusions)
    if performExclusions == nil then
        performExclusions = false
    end
    local game = Game()
    local players = {}
    do
        local i = 0
        while i < game:GetNumPlayers() do
            do
                local player = Isaac.GetPlayer(i)
                if player == nil then
                    goto __continue40
                end
                if ____exports.isChildPlayer(nil, player) then
                    goto __continue40
                end
                local character = player:GetPlayerType()
                if performExclusions and EXCLUDED_CHARACTERS:has(character) then
                    goto __continue40
                end
                __TS__ArrayPush(players, player)
            end
            ::__continue40::
            i = i + 1
        end
    end
    return players
end
function ____exports.getPlayerIndex(self, player)
    local character = player:GetPlayerType()
    local collectibleToUse = ((character == PlayerType.PLAYER_LAZARUS2_B) and CollectibleType.COLLECTIBLE_INNER_EYE) or CollectibleType.COLLECTIBLE_SAD_ONION
    local collectibleRNG = player:GetCollectibleRNG(collectibleToUse)
    local seed = collectibleRNG:GetSeed()
    local seedString = tostring(seed)
    return seedString
end
function ____exports.isChildPlayer(self, player)
    return player.Parent ~= nil
end
EXCLUDED_CHARACTERS = __TS__New(Set, {PlayerType.PLAYER_ESAU, PlayerType.PLAYER_THESOUL_B})
function ____exports.anyPlayerCloserThan(self, position, distance)
    for ____, player in ipairs(
        ____exports.getPlayers(nil)
    ) do
        if player.Position:Distance(position) <= distance then
            return true
        end
    end
    return false
end
function ____exports.anyPlayerHasCollectible(self, collectibleType)
    for ____, player in ipairs(
        ____exports.getPlayers(nil)
    ) do
        if player:HasCollectible(collectibleType) then
            return true
        end
    end
    return false
end
function ____exports.anyPlayerHasTrinket(self, trinketType)
    for ____, player in ipairs(
        ____exports.getPlayers(nil)
    ) do
        if player:HasTrinket(trinketType) then
            return true
        end
    end
    return false
end
function ____exports.anyPlayerIs(self, matchingCharacter)
    for ____, player in ipairs(
        ____exports.getPlayers(nil)
    ) do
        local character = player:GetPlayerType()
        if character == matchingCharacter then
            return true
        end
    end
    return false
end
function ____exports.getPlayersOfType(self, playerType)
    local players = {}
    for ____, player in ipairs(
        ____exports.getPlayers(nil)
    ) do
        local character = player:GetPlayerType()
        if character == playerType then
            __TS__ArrayPush(players, player)
        end
    end
    return players
end
function ____exports.getClosestPlayer(self, position)
    local closestPlayer = nil
    local closestDistance = math.huge
    for ____, player in ipairs(
        ____exports.getPlayers(nil)
    ) do
        local distance = position:Distance(player.Position)
        if distance < closestDistance then
            closestPlayer = player
            closestDistance = distance
        end
    end
    if closestPlayer == nil then
        error("Failed to find any players.")
    end
    return closestPlayer
end
function ____exports.getNewestPlayer(self)
    local newestPlayer = nil
    local lowestFrame = math.huge
    for ____, player in ipairs(
        ____exports.getPlayers(nil)
    ) do
        if player.FrameCount < lowestFrame then
            newestPlayer = player
            lowestFrame = player.FrameCount
        end
    end
    if newestPlayer == nil then
        error("Failed to find any players.")
    end
    return newestPlayer
end
function ____exports.getOpenTrinketSlot(self, player)
    local maxTrinkets = player:GetMaxTrinkets()
    local trinket0 = player:GetTrinket(0)
    local trinket1 = player:GetTrinket(1)
    if maxTrinkets == 1 then
        return ((trinket0 == TrinketType.TRINKET_NULL) and 0) or nil
    end
    if maxTrinkets == 2 then
        if trinket0 == TrinketType.TRINKET_NULL then
            return 0
        end
        return ((trinket1 == TrinketType.TRINKET_NULL) and 1) or nil
    end
    error(
        "The player has an unknown number of trinket slots: " .. tostring(maxTrinkets)
    )
    return nil
end
function ____exports.getPlayerCloserThan(self, position, distance)
    for ____, player in ipairs(
        ____exports.getPlayers(nil)
    ) do
        if player.Position:Distance(position) <= distance then
            return player
        end
    end
    return nil
end
function ____exports.getPlayerCollectibleMap(self, player)
    local collectibleMap = __TS__New(Map)
    for ____, collectibleType in __TS__Iterator(
        getCollectibleSet(nil)
    ) do
        do
            if not player:HasCollectible(collectibleType) then
                goto __continue33
            end
            local collectibleNum = player:GetCollectibleNum(collectibleType)
            if collectibleNum > 0 then
                collectibleMap:set(collectibleType, collectibleNum)
            end
        end
        ::__continue33::
    end
    return collectibleMap
end
function ____exports.getPlayerFromIndex(self, playerIndex)
    for ____, player in ipairs(
        ____exports.getPlayers(nil)
    ) do
        local existingPlayerIndex = ____exports.getPlayerIndex(nil, player)
        if existingPlayerIndex == playerIndex then
            return player
        end
    end
    return nil
end
function ____exports.getPlayerIndexVanilla(self, playerToFind)
    local game = Game()
    local playerToFindHash = GetPtrHash(playerToFind)
    do
        local i = 0
        while i < game:GetNumPlayers() do
            do
                local player = Isaac.GetPlayer(i)
                if player == nil then
                    goto __continue46
                end
                local playerHash = GetPtrHash(player)
                if playerHash == playerToFindHash then
                    return i
                end
            end
            ::__continue46::
            i = i + 1
        end
    end
    return nil
end
function ____exports.getPlayerNumAllHearts(self, player)
    local hearts = player:GetHearts()
    local soulHearts = player:GetSoulHearts()
    local boneHearts = player:GetBoneHearts()
    local eternalHearts = player:GetEternalHearts()
    return ((hearts + soulHearts) + boneHearts) + eternalHearts
end
function ____exports.getPocketItems(self, player)
    local pocketItem = player:GetActiveItem(ActiveSlot.SLOT_POCKET)
    local hasPocketItem = pocketItem ~= CollectibleType.COLLECTIBLE_NULL
    local pocketItem2 = player:GetActiveItem(ActiveSlot.SLOT_POCKET2)
    local hasPocketItem2 = pocketItem2 ~= CollectibleType.COLLECTIBLE_NULL
    local maxPocketItems = player:GetMaxPocketItems()
    local pocketItems = {}
    local pocketItemIdentified = false
    local pocketItem2Identified = false
    do
        local slot = 0
        while slot < 4 do
            local card = player:GetCard(slot)
            local pill = player:GetPill(slot)
            if card ~= Card.CARD_NULL then
                __TS__ArrayPush(pocketItems, {type = PocketItemType.CARD, id = card})
            elseif pill ~= PillColor.PILL_NULL then
                __TS__ArrayPush(pocketItems, {type = PocketItemType.PILL, id = pill})
            elseif (hasPocketItem and (not hasPocketItem2)) and (not pocketItemIdentified) then
                pocketItemIdentified = true
                __TS__ArrayPush(pocketItems, {type = PocketItemType.ACTIVE_ITEM, id = pocketItem})
            elseif ((not hasPocketItem) and hasPocketItem2) and (not pocketItem2Identified) then
                pocketItem2Identified = true
                __TS__ArrayPush(pocketItems, {type = PocketItemType.DICE_BAG_DICE, id = pocketItem2})
            elseif hasPocketItem and hasPocketItem2 then
                __TS__ArrayPush(pocketItems, {type = PocketItemType.UNDETERMINABLE, id = 0})
            else
                __TS__ArrayPush(pocketItems, {type = PocketItemType.EMPTY, id = 0})
            end
            if (slot + 1) == maxPocketItems then
                break
            end
            slot = slot + 1
        end
    end
    return pocketItems
end
function ____exports.getTotalPlayerCollectibles(self, collectibleType)
    local numCollectibles = 0
    for ____, player in ipairs(
        ____exports.getPlayers(nil)
    ) do
        numCollectibles = numCollectibles + player:GetCollectibleNum(collectibleType)
    end
    return numCollectibles
end
function ____exports.hasLostCurse(self, player)
    local effects = player:GetEffects()
    return effects:HasNullEffect(NullItemID.ID_LOST_CURSE)
end
function ____exports.hasOpenActiveItemSlot(self, player)
    local character = player:GetPlayerType()
    if character == PlayerType.PLAYER_THESOUL_B then
        return false
    end
    local activeItemPrimary = player:GetActiveItem(ActiveSlot.SLOT_PRIMARY)
    local activeItemSecondary = player:GetActiveItem(ActiveSlot.SLOT_SECONDARY)
    local hasSchoolbag = player:HasCollectible(CollectibleType.COLLECTIBLE_SCHOOLBAG)
    if hasSchoolbag then
        return (activeItemPrimary == CollectibleType.COLLECTIBLE_NULL) or (activeItemSecondary == CollectibleType.COLLECTIBLE_NULL)
    end
    return activeItemPrimary == CollectibleType.COLLECTIBLE_NULL
end
function ____exports.hasOpenPocketItemSlot(self, player)
    local character = player:GetPlayerType()
    if character == PlayerType.PLAYER_THESOUL_B then
        return false
    end
    local pocketItems = ____exports.getPocketItems(nil, player)
    for ____, pocketItem in ipairs(pocketItems) do
        if pocketItem.type == PocketItemType.EMPTY then
            return true
        end
    end
    return false
end
function ____exports.hasOpenTrinketSlot(self, player)
    local character = player:GetPlayerType()
    if character == PlayerType.PLAYER_THESOUL_B then
        return false
    end
    local openTrinketSlot = ____exports.getOpenTrinketSlot(nil, player)
    return openTrinketSlot ~= nil
end
function ____exports.isFirstPlayer(self, player)
    return ____exports.getPlayerIndexVanilla(nil, player) == 0
end
function ____exports.isJacobOrEsau(self, player)
    local character = player:GetPlayerType()
    return (character == PlayerType.PLAYER_JACOB) or (character == PlayerType.PLAYER_ESAU)
end
function ____exports.isKeeper(self, player)
    local character = player:GetPlayerType()
    return (character == PlayerType.PLAYER_KEEPER) or (character == PlayerType.PLAYER_KEEPER_B)
end
function ____exports.removeDeadEyeMultiplier(self, player)
    do
        local i = 0
        while i < 100 do
            player:ClearDeadEyeCharge()
            i = i + 1
        end
    end
end
return ____exports
