--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____constants = require("constants")
local MAX_NUM_DOORS = ____constants.MAX_NUM_DOORS
function ____exports.isAngelRoomDoor(self, door)
    return door.TargetRoomType == RoomType.ROOM_ANGEL
end
function ____exports.isDevilRoomDoor(self, door)
    return door.TargetRoomType == RoomType.ROOM_DEVIL
end
function ____exports.isRepentanceDoor(self, door)
    return door.TargetRoomIndex == GridRooms.ROOM_SECRET_EXIT_IDX
end
function ____exports.isSecretRoomDoor(self, door)
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_08_HoleInWall.anm2"
end
function ____exports.getDoors(self)
    local game = Game()
    local room = game:GetRoom()
    local doors = {}
    do
        local i = 0
        while i < MAX_NUM_DOORS do
            local door = room:GetDoor(i)
            if door ~= nil then
                __TS__ArrayPush(doors, door)
            end
            i = i + 1
        end
    end
    return doors
end
function ____exports.getAngelRoomDoor(self)
    for ____, door in ipairs(
        ____exports.getDoors(nil)
    ) do
        if ____exports.isAngelRoomDoor(nil, door) then
            return door
        end
    end
    return nil
end
function ____exports.getDevilRoomDoor(self)
    for ____, door in ipairs(
        ____exports.getDoors(nil)
    ) do
        if ____exports.isDevilRoomDoor(nil, door) then
            return door
        end
    end
    return nil
end
function ____exports.getDevilRoomOrAngelRoomDoor(self)
    for ____, door in ipairs(
        ____exports.getDoors(nil)
    ) do
        if ____exports.isDevilRoomDoor(nil, door) or ____exports.isAngelRoomDoor(nil, door) then
            return door
        end
    end
    return nil
end
function ____exports.getRepentanceDoor(self)
    for ____, door in ipairs(
        ____exports.getDoors(nil)
    ) do
        if ____exports.isRepentanceDoor(nil, door) then
            return door
        end
    end
    return nil
end
function ____exports.isHiddenSecretRoomDoor(self, door)
    local sprite = door:GetSprite()
    local animation = sprite:GetAnimation()
    return ____exports.isSecretRoomDoor(nil, door) and (animation == "Hidden")
end
function ____exports.isDoorToDownpour(self, door)
    if not ____exports.isRepentanceDoor(nil, door) then
        return false
    end
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_Downpour.anm2"
end
function ____exports.isDoorToMausoleum(self, door)
    if not ____exports.isRepentanceDoor(nil, door) then
        return false
    end
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_Mausoleum.anm2"
end
function ____exports.isDoorToMausoleumAscent(self, door)
    if not ____exports.isRepentanceDoor(nil, door) then
        return false
    end
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_Mausoleum_Alt.anm2"
end
function ____exports.isDoorToMines(self, door)
    if not ____exports.isRepentanceDoor(nil, door) then
        return false
    end
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_Mines.anm2"
end
function ____exports.isDoorToMomsHeart(self, door)
    if not ____exports.isRepentanceDoor(nil, door) then
        return false
    end
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_MomsHeart.anm2"
end
function ____exports.openAllDoors(self)
    for ____, door in ipairs(
        ____exports.getDoors(nil)
    ) do
        door:Open()
    end
end
return ____exports
