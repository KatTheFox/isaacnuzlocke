/// <reference types="isaac-typescript-definitions" />
/**
 * Helper function to add a bit flag to an existing set of bit flags.
 * This is a variadic function, so pass as many flags as you want to add.
 *
 * Example 1:
 * ```
 * // Give the player spectral tears
 * const player = Isaac.GetPlayer();
 * player.TearFlags = addFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL);
 * ```
 *
 * Example 2:
 * ```
 * // Give the player spectral and homing tears
 * const player = Isaac.GetPlayer();
 * player.TearFlags = addFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL, TearFlags.TEAR_HOMING);
 * ```
 *
 * @param flags The existing set of bit flags.
 * @param flag One or more bit flags to add, each as a separate argument.
 * @returns The combined bit flags.
 */
export declare function addFlag(flags: int, ...flag: int[]): int;
/**
 * Helper function to check to see if a particular bit flag is set to true.
 * This is a variadic function, so pass as many flags as you want to check for.
 * If passed multiple flags, it will only return true if all of the flags are set.
 *
 * Example:
 * ```
 * const player = Isaac.GetPlayer();
 * if (hasFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL) {
 *   // The player currently has spectral tears
 * }
 * ```
 *
 * @param flags The existing set of bit flags.
 * @param flag One or more bit flags to check for, each as a separate argument.
 */
export declare function hasFlag(flags: int, ...flag: int[]): boolean;
/**
 * Helper function to remove a bit flag from an existing set of bit flags.
 * This is a variadic function, so pass as many flags as you want to remove.
 *
 * Example:
 * ```
 * // Remove spectral tears from the player, if present
 * const player = Isaac.GetPlayer();
 * player.TearFlags = removeFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL);
 * ```
 *
 * @param flags The existing set of bit flags.
 * @param flag One or more bit flags to remove, each as a separate argument.
 * @returns The combined bit flags.
 */
export declare function removeFlag(flags: int, ...flag: int[]): int;
