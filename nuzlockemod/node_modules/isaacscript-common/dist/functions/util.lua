--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____constants = require("constants")
local VECTOR_BRAND = ____constants.VECTOR_BRAND
local ____items = require("functions.items")
local getMaxCollectibleID = ____items.getMaxCollectibleID
local ____math = require("functions.math")
local getAngleDifference = ____math.getAngleDifference
____exports.ensureAllCases = function(____, obj) return obj end
function ____exports.getEnumValues(self, transpiledEnum)
    local enumValues = {}
    for key, value in pairs(transpiledEnum) do
        if type(key) == "string" then
            __TS__ArrayPush(enumValues, value)
        end
    end
    __TS__ArraySort(enumValues)
    return enumValues
end
function ____exports.getCollectibleSet(self)
    local itemConfig = Isaac.GetItemConfig()
    local collectibleSet = __TS__New(Set)
    do
        local collectibleType = 1
        while collectibleType <= getMaxCollectibleID(nil) do
            local itemConfigItem = itemConfig:GetCollectible(collectibleType)
            if itemConfigItem ~= nil then
                collectibleSet:add(collectibleType)
            end
            collectibleType = collectibleType + 1
        end
    end
    return collectibleSet
end
function ____exports.isSerializedVector(self, object)
    local objectType = type(object)
    if objectType ~= "table" then
        return false
    end
    local ____table = object
    return ((____table[VECTOR_BRAND] ~= nil) and (____table.X ~= nil)) and (____table.Y ~= nil)
end
function ____exports.isVector(self, object)
    local objectType = type(object)
    if objectType ~= "userdata" then
        return false
    end
    local metatable = getmetatable(object)
    if metatable == nil then
        return false
    end
    local vectorMetatable = metatable
    return vectorMetatable.__type == "Vector"
end
function ____exports.lerp(self, a, b, pos)
    return a + ((b - a) * pos)
end
function ____exports.lerpAngleDegrees(self, aStart, aEnd, percent)
    return aStart + (getAngleDifference(nil, aStart, aEnd) * percent)
end
function ____exports.onSetSeed(self)
    local game = Game()
    local seeds = game:GetSeeds()
    local customRun = seeds:IsCustomRun()
    local challenge = Isaac.GetChallenge()
    return (challenge == Challenge.CHALLENGE_NULL) and customRun
end
function ____exports.tableClear(self, ____table)
    for key in pairs(____table) do
        ____table[key] = nil
    end
end
function ____exports.teleport(self, roomIndex, direction, roomTransitionAnim)
    if direction == nil then
        direction = Direction.NO_DIRECTION
    end
    if roomTransitionAnim == nil then
        roomTransitionAnim = RoomTransitionAnim.TELEPORT
    end
    local game = Game()
    local level = game:GetLevel()
    level.LeaveDoor = -1
    game:StartRoomTransition(roomIndex, direction, roomTransitionAnim)
end
function ____exports.vectorToDirection(self, vector)
    local degrees = vector:GetAngleDegrees()
    if (degrees >= -45) and (degrees < 45) then
        return Direction.RIGHT
    end
    if (degrees >= 45) and (degrees < 135) then
        return Direction.DOWN
    end
    if (degrees < -45) and (degrees >= -135) then
        return Direction.UP
    end
    if (degrees >= 135) or (degrees < -135) then
        return Direction.LEFT
    end
    return Direction.NO_DIRECTION
end
return ____exports
