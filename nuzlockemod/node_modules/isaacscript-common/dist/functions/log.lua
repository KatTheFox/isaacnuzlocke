--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____flag = require("functions.flag")
local hasFlag = ____flag.hasFlag
function ____exports.getDebugPrependString(self, msg, numParentFunctions)
    if numParentFunctions == nil then
        numParentFunctions = 3
    end
    if debug ~= nil then
        local debugTable = debug.getinfo(numParentFunctions)
        if debugTable ~= nil then
            return (((tostring(debugTable.name) .. ":") .. tostring(debugTable.linedefined)) .. " - ") .. msg
        end
    end
    if getParentFunctionDescription ~= nil then
        return (getParentFunctionDescription(numParentFunctions + 1) .. " - ") .. msg
    end
    return msg
end
function ____exports.log(self, msg)
    local debugMsg = ____exports.getDebugPrependString(nil, msg)
    Isaac.DebugString(debugMsg)
end
function ____exports.logAllFlags(self, flags, flagEnum, description)
    if description == nil then
        description = ""
    end
    if description ~= "" then
        description = description .. " "
    end
    ____exports.log(nil, ("Logging all " .. description) .. "flags:")
    for key, value in pairs(flagEnum) do
        if hasFlag(nil, flags, value) then
            ____exports.log(
                nil,
                "- Has flag: " .. tostring(key)
            )
        end
    end
end
function ____exports.logAllDamageFlags(self, flags)
    ____exports.logAllFlags(nil, flags, DamageFlag, "damage")
end
function ____exports.logAllEntityFlags(self, flags)
    ____exports.logAllFlags(nil, flags, EntityFlag, "entity")
end
function ____exports.logAllGameStateFlags(self)
    local game = Game()
    ____exports.log(nil, "Logging all game state flags:")
    for ____, ____value in ipairs(
        __TS__ObjectEntries(GameStateFlag)
    ) do
        local key
        key = ____value[1]
        local value
        value = ____value[2]
        local gameStateFlag = value
        local flagValue = game:GetStateFlag(gameStateFlag)
        if flagValue then
            ____exports.log(nil, "- Has flag: " .. key)
        end
    end
end
function ____exports.logAllProjectileFlags(self, flags)
    ____exports.logAllFlags(nil, flags, ProjectileFlags, "projectile")
end
function ____exports.logAllUseFlags(self, flags)
    ____exports.logAllFlags(nil, flags, UseFlag, "use")
end
function ____exports.logEntity(self, entity)
    ____exports.log(
        nil,
        (((("Entity: " .. tostring(entity.Type)) .. ".") .. tostring(entity.Variant)) .. ".") .. tostring(entity.SubType)
    )
end
return ____exports
