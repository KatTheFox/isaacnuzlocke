/// <reference types="typescript-to-lua/language-extensions" />
/// <reference types="isaac-typescript-definitions" />
export declare enum SerializationType {
    NONE = 0,
    SERIALIZE = 1,
    DESERIALIZE = 2
}
/**
 * deepCopy returns a new Lua table, a TypeScriptToLua Map, or a TypeScriptToLua Set that is
 * identical to the provided one. It will recursively copy all of the values so that none of the
 * nested references remain.
 *
 * It will refuse to copy tables that have metatables, since that indicates that it the table is a
 * special object of some kind and cannot be copied in a generically safe way. There are three
 * exceptions, which the function has explicit logic to support:
 *
 * 1. TypeScriptToLua Maps
 * 2. TypeScriptToLua Sets
 * 2. Vectors
 *
 * @param oldObject The Lua table or TypeScriptToLua Map to copy.
 * @param serializationType Has 3 possible values. Can leave TypeScriptToLua objects as-is, or can
 * serialize objects to Lua tables, or can deserialize Lua tables to objects. No serialization by
 * default.
 * @param traversalDescription Used to track the current key that we are operating on.
 */
export declare function deepCopy(oldObject: LuaTable | Map<AnyNotNil, unknown> | Set<AnyNotNil>, serializationType?: SerializationType, traversalDescription?: string): LuaTable | Map<AnyNotNil, unknown> | Set<AnyNotNil>;
export declare function deserializeVector(vectorTable: LuaTable): Vector;
export declare function addTraversalDescription(key: AnyNotNil, traversalDescription: string): string;
