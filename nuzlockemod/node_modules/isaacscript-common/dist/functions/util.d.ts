/// <reference types="isaac-typescript-definitions" />
/// <reference types="typescript-to-lua/language-extensions" />
/**
 * Helper function to get type safety on a switch statement.
 * Very useful to be future-safe against people adding values to a type or an enum.
 *
 * Example:
 * ```
 * enum Situations {
 *   Situation1,
 *   Situation2,
 *   Situation3,
 *   // Situation4, // If we uncomment this line, the program will no longer compile
 * }
 *
 * function doThingBasedOnSituation(situation: Situation) {
 *   switch (situation) {
 *     case Situation1: {
 *       return 41;
 *     }
 *
 *     case Situation2: {
 *       return 68;
 *     }
 *
 *     case Situation3: {
 *       return 12;
 *     }
 *
 *     default: {
 *       ensureAllCases(situation);
 *       return 0;
 *     }
 *   }
 * }
 * ```
 */
export declare const ensureAllCases: (obj: never) => never;
/**
 * TypeScriptToLua will transpile TypeScript enums to Lua tables that have a double mapping. Thus,
 * when you iterate over them, you will get both the names of the enums and the values of the enums,
 * in a random order. If all you need are the values of an enum, use this helper function.
 *
 * For a more in depth explanation, see:
 * https://isaacscript.github.io/docs/gotchas#iterating-over-enums
 */
export declare function getEnumValues(transpiledEnum: unknown): int[];
/** Returns a set containing every valid collectible type in the game, including modded items. */
export declare function getCollectibleSet(): Set<CollectibleType | int>;
/**
 * Used to determine is the given table is a serialized Vector created by the save data manager
 * and/or the `deepCopy` function.
 */
export declare function isSerializedVector(object: unknown): boolean;
export declare function isVector(object: unknown): boolean;
export declare function lerp(a: number, b: number, pos: float): number;
export declare function lerpAngleDegrees(aStart: number, aEnd: number, percent: float): number;
/**
 * Whether or not the player is playing on a set seed (i.e. that they entered in a specific seed by
 * pressing tab on the character selection screen). When the player resets the game on a set seed,
 * the game will not switch to a different seed.
 */
export declare function onSetSeed(): boolean;
/**
 * In a Map, you can use the `clear` method to delete every element. However, in a LuaTable, the
 * `clear` method does not exist. Use this helper function as a drop-in replacement for this.
 */
export declare function tableClear(table: LuaTable): void;
export declare function teleport(roomIndex: int, direction?: Direction, roomTransitionAnim?: RoomTransitionAnim): void;
/** Helper function for finding out which way a vector is pointing. */
export declare function vectorToDirection(vector: Vector): Direction;
