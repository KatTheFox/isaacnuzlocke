--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____main = require("features.saveDataManager.main")
local saveDataManager = ____main.saveDataManager
local ____player = require("functions.player")
local getPlayerIndex = ____player.getPlayerIndex
local ____ModCallbacksCustom = require("types.ModCallbacksCustom")
local ModCallbacksCustom = ____ModCallbacksCustom.default
local postItemPickup = require("callbacks.subscriptions.postItemPickup")
local preItemPickup = require("callbacks.subscriptions.preItemPickup")
local v, hasSubscriptions, postPlayerUpdateReorderedPlayer, queueEmpty, queueNotEmpty, getPickingUpItemForPlayer
function hasSubscriptions(self)
    return preItemPickup:hasSubscriptions() or postItemPickup:hasSubscriptions()
end
function postPlayerUpdateReorderedPlayer(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local pickingUpItem = getPickingUpItemForPlayer(nil, player)
    if player:IsItemQueueEmpty() then
        queueEmpty(nil, player, pickingUpItem)
    else
        queueNotEmpty(nil, player, pickingUpItem)
    end
end
function queueEmpty(self, player, pickingUpItem)
    if pickingUpItem.id ~= CollectibleType.COLLECTIBLE_NULL then
        postItemPickup:fire(player, pickingUpItem)
        pickingUpItem.id = CollectibleType.COLLECTIBLE_NULL
        pickingUpItem.type = ItemType.ITEM_NULL
    end
end
function queueNotEmpty(self, player, pickingUpItem)
    local queuedItem = player.QueuedItem.Item
    if (queuedItem ~= nil) and (queuedItem.ID ~= pickingUpItem.id) then
        pickingUpItem.id = queuedItem.ID
        pickingUpItem.type = queuedItem.Type
        preItemPickup:fire(player, pickingUpItem)
    end
end
function getPickingUpItemForPlayer(self, player)
    local index = getPlayerIndex(nil, player)
    local pickingUpItem = v.run.pickingUpItem:get(index)
    if pickingUpItem == nil then
        pickingUpItem = {id = CollectibleType.COLLECTIBLE_NULL, type = ItemType.ITEM_NULL}
        v.run.pickingUpItem:set(index, pickingUpItem)
    end
    return pickingUpItem
end
v = {
    run = {
        pickingUpItem = __TS__New(Map)
    }
}
function ____exports.init(self, mod)
    saveDataManager(nil, "itemPickupCallback", v, hasSubscriptions)
    mod:AddCallbackCustom(ModCallbacksCustom.MC_POST_PLAYER_UPDATE_REORDERED, postPlayerUpdateReorderedPlayer, 0)
end
return ____exports
