--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
local ____exports = {}
local ____player = require("functions.player")
local getPlayerNumAllHearts = ____player.getPlayerNumAllHearts
local hasLostCurse = ____player.hasLostCurse
local ____revive = require("functions.revive")
local willPlayerRevive = ____revive.willPlayerRevive
local postPlayerFatalDamage = require("callbacks.subscriptions.postPlayerFatalDamage")
local hasSubscriptions, entityTakeDmgPlayer, damageIsFatal
function hasSubscriptions(self)
    return postPlayerFatalDamage:hasSubscriptions()
end
function entityTakeDmgPlayer(self, tookDamage, damageAmount, _damageFlags, _damageSource, _damageCountdownFrames)
    if not hasSubscriptions(nil) then
        return nil
    end
    local player = tookDamage:ToPlayer()
    if player == nil then
        return nil
    end
    if willPlayerRevive(nil, player) then
        return nil
    end
    if (not hasLostCurse(nil, player)) and (not damageIsFatal(nil, player, damageAmount)) then
        return nil
    end
    local shouldSustainDeath = postPlayerFatalDamage:fire(player)
    if shouldSustainDeath ~= nil then
        return shouldSustainDeath
    end
    return nil
end
function damageIsFatal(self, player, damageAmount)
    local playerNumAllHearts = getPlayerNumAllHearts(nil, player)
    if damageAmount < playerNumAllHearts then
        return false
    end
    local hearts = player:GetHearts()
    local eternalHearts = player:GetEternalHearts()
    local soulHearts = player:GetSoulHearts()
    local boneHearts = player:GetBoneHearts()
    if (((((hearts > 0) and (soulHearts > 0)) or ((hearts > 0) and (boneHearts > 0))) or ((soulHearts > 0) and (boneHearts > 0))) or ((soulHearts > 0) and (eternalHearts > 0))) or (boneHearts >= 2) then
        return false
    end
    return true
end
function ____exports.init(self, mod)
    mod:AddCallback(ModCallbacks.MC_ENTITY_TAKE_DMG, entityTakeDmgPlayer, EntityType.ENTITY_PLAYER)
end
return ____exports
