--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____main = require("features.saveDataManager.main")
local saveDataManager = ____main.saveDataManager
local ____array = require("functions.array")
local initArray = ____array.initArray
local ____player = require("functions.player")
local getPlayerIndex = ____player.getPlayerIndex
local ____ModCallbacksCustom = require("types.ModCallbacksCustom")
local ModCallbacksCustom = ____ModCallbacksCustom.default
local postTransformation = require("callbacks.subscriptions.postTransformation")
local v, hasSubscriptions, postPlayerUpdateReorderedPlayer
function hasSubscriptions(self)
    return postTransformation:hasSubscriptions()
end
function postPlayerUpdateReorderedPlayer(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local index = getPlayerIndex(nil, player)
    local transformations = v.run.transformations:get(index)
    if transformations == nil then
        transformations = initArray(nil, false, PlayerForm.NUM_PLAYER_FORMS - 1)
        v.run.transformations:set(index, transformations)
    end
    do
        local playerForm = 0
        while playerForm < PlayerForm.NUM_PLAYER_FORMS do
            local hasForm = player:HasPlayerForm(playerForm)
            local storedForm = transformations[playerForm + 1]
            if hasForm ~= storedForm then
                transformations[playerForm + 1] = hasForm
                postTransformation:fire(player, playerForm, hasForm)
            end
            playerForm = playerForm + 1
        end
    end
end
v = {
    run = {
        transformations = __TS__New(Map)
    }
}
function ____exports.init(self, mod)
    saveDataManager(nil, "postTransformationCallback", v, hasSubscriptions)
    mod:AddCallbackCustom(ModCallbacksCustom.MC_POST_PLAYER_UPDATE_REORDERED, postPlayerUpdateReorderedPlayer, 0)
end
return ____exports
