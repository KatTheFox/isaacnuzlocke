--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____main = require("features.saveDataManager.main")
local saveDataManager = ____main.saveDataManager
local ____flag = require("functions.flag")
local hasFlag = ____flag.hasFlag
local ____player = require("functions.player")
local getPlayerIndex = ____player.getPlayerIndex
local getPlayerNumAllHearts = ____player.getPlayerNumAllHearts
local postCursedTeleport = require("callbacks.subscriptions.postCursedTeleport")
local v, hasSubscriptions, entityTakeDmgPlayer, setDamageFrame, isPotentialNaturalTeleportFromSacrificeRoom, incrementNumSacrifices, postPlayerRenderPlayer, playerIsTeleportingFromCursedTeleport
function hasSubscriptions(self)
    return postCursedTeleport:hasSubscriptions()
end
function entityTakeDmgPlayer(self, tookDamage, _damageAmount, damageFlags, _damageSource, _damageCountdownFrames)
    if not hasSubscriptions(nil) then
        return
    end
    incrementNumSacrifices(nil, damageFlags)
    setDamageFrame(nil, tookDamage, damageFlags)
end
function setDamageFrame(self, tookDamage, damageFlags)
    local game = Game()
    local gameFrameCount = game:GetFrameCount()
    local player = tookDamage:ToPlayer()
    if player == nil then
        return
    end
    local playerIndex = getPlayerIndex(nil, player)
    local trackingArray = v.run.damageFrameMap:get(playerIndex)
    if trackingArray ~= nil then
        local lastDamageFrame, callbackActivatedOnThisFrame = table.unpack(trackingArray)
        if (lastDamageFrame == gameFrameCount) and callbackActivatedOnThisFrame then
            return
        end
    end
    if isPotentialNaturalTeleportFromSacrificeRoom(nil, damageFlags) then
        return
    end
    v.run.damageFrameMap:set(playerIndex, {gameFrameCount, false})
end
function isPotentialNaturalTeleportFromSacrificeRoom(self, damageFlags)
    local game = Game()
    local room = game:GetRoom()
    local roomType = room:GetType()
    local isSpikeDamage = hasFlag(nil, damageFlags, DamageFlag.DAMAGE_SPIKES)
    return ((roomType == RoomType.ROOM_SACRIFICE) and isSpikeDamage) and ((v.level.numSacrifices == 6) or (v.level.numSacrifices >= 12))
end
function incrementNumSacrifices(self, damageFlags)
    local game = Game()
    local room = game:GetRoom()
    local roomType = room:GetType()
    local isSpikeDamage = hasFlag(nil, damageFlags, DamageFlag.DAMAGE_SPIKES)
    if (roomType == RoomType.ROOM_SACRIFICE) and isSpikeDamage then
        local ____obj, ____index = v.level, "numSacrifices"
        ____obj[____index] = ____obj[____index] + 1
    end
end
function postPlayerRenderPlayer(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local game = Game()
    local gameFrameCount = game:GetFrameCount()
    local playerIndex = getPlayerIndex(nil, player)
    local trackingArray = v.run.damageFrameMap:get(playerIndex)
    if trackingArray == nil then
        return
    end
    local lastDamageFrame, callbackActivatedOnThisFrame = table.unpack(trackingArray)
    if not playerIsTeleportingFromCursedTeleport(nil, player, lastDamageFrame) then
        return
    end
    if callbackActivatedOnThisFrame then
        return
    end
    v.run.damageFrameMap:set(playerIndex, {gameFrameCount, true})
    postCursedTeleport:fire(player)
end
function playerIsTeleportingFromCursedTeleport(self, player, lastDamageFrame)
    local game = Game()
    local gameFrameCount = game:GetFrameCount()
    if gameFrameCount ~= lastDamageFrame then
        return false
    end
    local sprite = player:GetSprite()
    if (not sprite:IsPlaying("TeleportUp")) or (sprite:GetFrame() ~= 1) then
        return false
    end
    if player:HasCollectible(CollectibleType.COLLECTIBLE_CURSED_EYE) then
        return true
    end
    local numHitsLeft = getPlayerNumAllHearts(nil, player)
    if player:HasTrinket(TrinketType.TRINKET_CURSED_SKULL) and (numHitsLeft == 1) then
        return true
    end
    return false
end
v = {
    run = {
        damageFrameMap = __TS__New(Map)
    },
    level = {numSacrifices = 0}
}
function ____exports.init(self, mod)
    saveDataManager(nil, "postCursedEyeActivationCallback", v, hasSubscriptions)
    mod:AddCallback(ModCallbacks.MC_ENTITY_TAKE_DMG, entityTakeDmgPlayer, EntityType.ENTITY_PLAYER)
    mod:AddCallback(ModCallbacks.MC_POST_PLAYER_RENDER, postPlayerRenderPlayer, 0)
end
return ____exports
