--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
local ____exports = {}
local ____main = require("features.saveDataManager.main")
local saveDataManager = ____main.saveDataManager
local ____player = require("functions.player")
local getPlayers = ____player.getPlayers
local postEsauJr = require("callbacks.subscriptions.postEsauJr")
local postFirstEsauJr = require("callbacks.subscriptions.postFirstEsauJr")
local v, hasSubscriptions, postUpdate, getPlayerWithControllerIndex, useItemEsauJr
function hasSubscriptions(self)
    return postEsauJr:hasSubscriptions() or postFirstEsauJr:hasSubscriptions()
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    local game = Game()
    local gameFrameCount = game:GetFrameCount()
    if (v.run.usedEsauJrFrame == nil) or (gameFrameCount < (v.run.usedEsauJrFrame + 1)) then
        return
    end
    v.run.usedEsauJrFrame = nil
    if v.run.usedEsauJrControllerIndex == nil then
        return
    end
    local player = getPlayerWithControllerIndex(nil, v.run.usedEsauJrControllerIndex)
    v.run.usedEsauJrControllerIndex = nil
    if player == nil then
        return
    end
    if not v.run.usedEsauJrAtLeastOnce then
        v.run.usedEsauJrAtLeastOnce = true
        postFirstEsauJr:fire(player)
    end
    postEsauJr:fire(player)
end
function getPlayerWithControllerIndex(self, controllerIndex)
    for ____, player in ipairs(
        getPlayers(nil)
    ) do
        if player.ControllerIndex == controllerIndex then
            return player
        end
    end
    return nil
end
function useItemEsauJr(self, _collectibleType, _rng, player, _useFlags, _activeSlot, _customVarData)
    if not hasSubscriptions(nil) then
        return
    end
    local game = Game()
    local gameFrameCount = game:GetFrameCount()
    v.run.usedEsauJrFrame = gameFrameCount + 1
    v.run.usedEsauJrControllerIndex = player.ControllerIndex
end
v = {run = {usedEsauJrFrame = nil, usedEsauJrControllerIndex = nil, usedEsauJrAtLeastOnce = false}}
function ____exports.init(self, mod)
    saveDataManager(nil, "postEsauJrCallback", v, hasSubscriptions)
    mod:AddCallback(ModCallbacks.MC_POST_UPDATE, postUpdate)
    mod:AddCallback(ModCallbacks.MC_USE_ITEM, useItemEsauJr, CollectibleType.COLLECTIBLE_ESAU_JR)
end
return ____exports
