--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____main = require("features.saveDataManager.main")
local saveDataManager = ____main.saveDataManager
local ____gridEntity = require("functions.gridEntity")
local getGridEntities = ____gridEntity.getGridEntities
local postGridEntityInit = require("callbacks.subscriptions.postGridEntityInit")
local postGridEntityRemove = require("callbacks.subscriptions.postGridEntityRemove")
local postGridEntityUpdate = require("callbacks.subscriptions.postGridEntityUpdate")
local v, hasSubscriptions, postUpdate, postNewRoom, checkNewGridEntity
function hasSubscriptions(self)
    return (postGridEntityInit:hasSubscriptions() or postGridEntityUpdate:hasSubscriptions()) or postGridEntityRemove:hasSubscriptions()
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    local game = Game()
    local room = game:GetRoom()
    for ____, gridEntity in ipairs(
        getGridEntities(nil)
    ) do
        checkNewGridEntity(nil, gridEntity)
        postGridEntityUpdate:fire(gridEntity)
    end
    for ____, ____value in __TS__Iterator(v.room.initializedGridEntities) do
        local gridIndex
        gridIndex = ____value[1]
        local gridEntityType
        gridEntityType = ____value[2]
        local gridEntity = room:GetGridEntity(gridIndex)
        if (gridEntity == nil) or (gridEntity:GetType() ~= gridEntityType) then
            v.room.initializedGridEntities:delete(gridIndex)
            postGridEntityRemove:fire(gridIndex, gridEntityType)
        end
    end
end
function postNewRoom(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, gridEntity in ipairs(
        getGridEntities(nil)
    ) do
        checkNewGridEntity(nil, gridEntity)
    end
end
function checkNewGridEntity(self, gridEntity)
    local gridIndex = gridEntity:GetGridIndex()
    local gridEntityType = gridEntity:GetType()
    local storedGridEntityType = v.room.initializedGridEntities:get(gridIndex)
    if storedGridEntityType ~= gridEntityType then
        v.room.initializedGridEntities:set(gridIndex, gridEntityType)
        postGridEntityInit:fire(gridEntity)
    end
end
v = {
    room = {
        initializedGridEntities = __TS__New(Map)
    }
}
function ____exports.init(self, mod)
    saveDataManager(nil, "postGridEntityCallback", v, hasSubscriptions)
    mod:AddCallback(ModCallbacks.MC_POST_UPDATE, postUpdate)
    mod:AddCallback(ModCallbacks.MC_POST_NEW_ROOM, postNewRoom)
end
return ____exports
