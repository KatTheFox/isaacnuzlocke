--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____main = require("features.saveDataManager.main")
local saveDataManager = ____main.saveDataManager
local ____player = require("functions.player")
local getPlayerIndex = ____player.getPlayerIndex
local ____util = require("functions.util")
local ensureAllCases = ____util.ensureAllCases
local getEnumValues = ____util.getEnumValues
local ____HealthType = require("types.HealthType")
local HealthType = ____HealthType.default
local ____ModCallbacksCustom = require("types.ModCallbacksCustom")
local ModCallbacksCustom = ____ModCallbacksCustom.default
local postPlayerChangeHealth = require("callbacks.subscriptions.postPlayerChangeHealth")
local v, hasSubscriptions, postPlayerUpdateReordered, getCurrentHealthValue
function hasSubscriptions(self)
    return postPlayerChangeHealth:hasSubscriptions()
end
function postPlayerUpdateReordered(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local playerIndex = getPlayerIndex(nil, player)
    local storedHealth = v.run.healthMap:get(playerIndex)
    if storedHealth == nil then
        storedHealth = __TS__New(Map)
    end
    local healthTypes = getEnumValues(nil, HealthType)
    for ____, healthType in ipairs(healthTypes) do
        local storedHealthValue = storedHealth:get(healthType)
        local currentHealthValue = getCurrentHealthValue(nil, player, healthType)
        if (storedHealthValue ~= nil) and (storedHealthValue ~= currentHealthValue) then
            local amount = currentHealthValue - storedHealthValue
            postPlayerChangeHealth:fire(player, healthType, amount)
        end
    end
end
function getCurrentHealthValue(self, player, healthType)
    local ____switch10 = healthType
    if ____switch10 == HealthType.RED then
        goto ____switch10_case_0
    elseif ____switch10 == HealthType.SOUL then
        goto ____switch10_case_1
    elseif ____switch10 == HealthType.BLACK then
        goto ____switch10_case_2
    elseif ____switch10 == HealthType.BONE then
        goto ____switch10_case_3
    elseif ____switch10 == HealthType.GOLDEN then
        goto ____switch10_case_4
    elseif ____switch10 == HealthType.ETERNAL then
        goto ____switch10_case_5
    elseif ____switch10 == HealthType.MAX_HEARTS then
        goto ____switch10_case_6
    end
    goto ____switch10_case_default
    ::____switch10_case_0::
    do
        do
            return player:GetHearts()
        end
    end
    ::____switch10_case_1::
    do
        do
            return player:GetSoulHearts()
        end
    end
    ::____switch10_case_2::
    do
        do
            return player:GetBlackHearts()
        end
    end
    ::____switch10_case_3::
    do
        do
            return player:GetBoneHearts()
        end
    end
    ::____switch10_case_4::
    do
        do
            return player:GetGoldenHearts()
        end
    end
    ::____switch10_case_5::
    do
        do
            return player:GetEternalHearts()
        end
    end
    ::____switch10_case_6::
    do
        do
            return player:GetMaxHearts()
        end
    end
    ::____switch10_case_default::
    do
        do
            ensureAllCases(nil, healthType)
            return 0
        end
    end
    ::____switch10_end::
end
v = {
    run = {
        healthMap = __TS__New(Map)
    }
}
function ____exports.init(self, mod)
    saveDataManager(nil, "postPlayerChangeHealthCallback", v, hasSubscriptions)
    mod:AddCallbackCustom(ModCallbacksCustom.MC_POST_PLAYER_UPDATE_REORDERED, postPlayerUpdateReordered)
end
return ____exports
