--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
local ____exports = {}
local ____entity = require("functions.entity")
local removeAllMatchingEntities = ____entity.removeAllMatchingEntities
local ____items = require("functions.items")
local removeItemFromItemTracker = ____items.removeItemFromItemTracker
local ____player = require("functions.player")
local getPlayerIndex = ____player.getPlayerIndex
local ____ModCallbacksCustom = require("types.ModCallbacksCustom")
local ModCallbacksCustom = ____ModCallbacksCustom.default
local postCustomRevive = require("callbacks.subscriptions.postCustomRevive")
local preCustomRevive = require("callbacks.subscriptions.preCustomRevive")
local CustomReviveState, v, hasSubscriptions, postRender, postNewRoom, postPlayerUpdateReordered, postPlayerFatalDamage
function hasSubscriptions(self)
    return preCustomRevive:hasSubscriptions() or postCustomRevive:hasSubscriptions()
end
function postRender(self)
    if v.run.state ~= CustomReviveState.WAITING_FOR_ITEM_ANIMATION then
        return
    end
    local sfx = SFXManager()
    sfx:Stop(SoundEffect.SOUND_1UP)
end
function postNewRoom(self)
    if v.run.state ~= CustomReviveState.CHANGING_ROOMS then
        return
    end
    v.run.state = CustomReviveState.WAITING_FOR_ITEM_ANIMATION
end
function postPlayerUpdateReordered(self, player)
    if v.run.state ~= CustomReviveState.WAITING_FOR_ITEM_ANIMATION then
        return
    end
    if v.run.dyingPlayerIndex == nil then
        return
    end
    local playerIndex = getPlayerIndex(nil, player)
    if playerIndex ~= v.run.dyingPlayerIndex then
        return
    end
    if not player:IsHoldingItem() then
        return
    end
    if v.run.revivalType ~= nil then
        postCustomRevive:fire(player, v.run.revivalType)
    end
    v.run.state = CustomReviveState.DISABLED
    v.run.revivalType = nil
    v.run.dyingPlayerIndex = nil
end
function postPlayerFatalDamage(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local revivalType = preCustomRevive:fire(player)
    if revivalType == nil then
        return
    end
    v.run.state = CustomReviveState.CHANGING_ROOMS
    v.run.revivalType = revivalType
    v.run.dyingPlayerIndex = getPlayerIndex(nil, player)
    player:AddCollectible(CollectibleType.COLLECTIBLE_1UP, 0, false)
    removeAllMatchingEntities(nil, EntityType.ENTITY_FAMILIAR, FamiliarVariant.ONE_UP)
    removeItemFromItemTracker(nil, CollectibleType.COLLECTIBLE_1UP)
end
CustomReviveState = CustomReviveState or ({})
CustomReviveState.DISABLED = 0
CustomReviveState[CustomReviveState.DISABLED] = "DISABLED"
CustomReviveState.CHANGING_ROOMS = 1
CustomReviveState[CustomReviveState.CHANGING_ROOMS] = "CHANGING_ROOMS"
CustomReviveState.WAITING_FOR_ITEM_ANIMATION = 2
CustomReviveState[CustomReviveState.WAITING_FOR_ITEM_ANIMATION] = "WAITING_FOR_ITEM_ANIMATION"
v = {run = {state = CustomReviveState.DISABLED, revivalType = nil, dyingPlayerIndex = nil}}
function ____exports.init(self, mod)
    mod:AddCallback(ModCallbacks.MC_POST_RENDER, postRender)
    mod:AddCallback(ModCallbacks.MC_POST_NEW_ROOM, postNewRoom)
    mod:AddCallbackCustom(ModCallbacksCustom.MC_POST_PLAYER_UPDATE_REORDERED, postPlayerUpdateReordered)
    mod:AddCallbackCustom(ModCallbacksCustom.MC_POST_PLAYER_FATAL_DAMAGE, postPlayerFatalDamage)
end
return ____exports
