--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____main = require("features.saveDataManager.main")
local saveDataManager = ____main.saveDataManager
local ____player = require("functions.player")
local getPlayerIndex = ____player.getPlayerIndex
local getPlayers = ____player.getPlayers
local postPurchase = require("callbacks.subscriptions.postPurchase")
local v, hasSubscriptions, postUpdate, checkPickupsGone, storePickupsInMap, storePlayersInMap, pickupIndexExists
function hasSubscriptions(self)
    return postPurchase:hasSubscriptions()
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    local pickups = Isaac.FindByType(EntityType.ENTITY_PICKUP)
    local players = getPlayers(nil)
    checkPickupsGone(nil, pickups, players)
    storePickupsInMap(nil, pickups)
    storePlayersInMap(nil, players)
end
function checkPickupsGone(self, pickups, players)
    for ____, ____value in __TS__Iterator(v.room.pickupMap) do
        local index
        index = ____value[1]
        local pickupDescription
        pickupDescription = ____value[2]
        do
            if pickupIndexExists(nil, index, pickups) then
                goto __continue7
            end
            v.room.pickupMap:delete(index)
            for ____, player in ipairs(players) do
                do
                    local playerHoldingItem = player:IsHoldingItem()
                    local playerIndex = getPlayerIndex(nil, player)
                    local playerHoldingItemOnLastFrame = v.room.playerHoldingItemMap:get(playerIndex)
                    if playerHoldingItemOnLastFrame == nil then
                        goto __continue9
                    end
                    if (not playerHoldingItemOnLastFrame) and playerHoldingItem then
                        postPurchase:fire(player, pickupDescription.variant, pickupDescription.subtype, pickupDescription.price)
                        break
                    end
                end
                ::__continue9::
            end
        end
        ::__continue7::
    end
end
function storePickupsInMap(self, pickups)
    for ____, entity in ipairs(pickups) do
        do
            local pickup = entity:ToPickup()
            if (pickup == nil) or (pickup.Price == 0) then
                goto __continue13
            end
            v.room.pickupMap:set(pickup.Index, {variant = pickup.Variant, subtype = pickup.SubType, price = pickup.Price})
        end
        ::__continue13::
    end
end
function storePlayersInMap(self, players)
    for ____, player in ipairs(players) do
        local playerIndex = getPlayerIndex(nil, player)
        local holdingItem = player:IsHoldingItem()
        v.room.playerHoldingItemMap:set(playerIndex, holdingItem)
    end
end
function pickupIndexExists(self, index, pickups)
    for ____, entity in ipairs(pickups) do
        if entity.Index == index then
            return true
        end
    end
    return false
end
v = {
    room = {
        pickupMap = __TS__New(Map),
        playerHoldingItemMap = __TS__New(Map)
    }
}
function ____exports.init(self, mod)
    saveDataManager(nil, "postPurchaseCallback", v, hasSubscriptions)
    mod:AddCallback(ModCallbacks.MC_POST_UPDATE, postUpdate)
end
return ____exports
