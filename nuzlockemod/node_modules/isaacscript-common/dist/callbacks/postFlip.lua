--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
local ____exports = {}
local ____main = require("features.saveDataManager.main")
local saveDataManager = ____main.saveDataManager
local ____player = require("functions.player")
local getPlayers = ____player.getPlayers
local postFirstFlip = require("callbacks.subscriptions.postFirstFlip")
local postFlip = require("callbacks.subscriptions.postFlip")
local v, hasSubscriptions, useItemFlip, getNewLazarus
function hasSubscriptions(self)
    return postFlip:hasSubscriptions() or postFirstFlip:hasSubscriptions()
end
function useItemFlip(self, _collectibleType, _rng, player, _useFlags, _activeSlot, _customVarData)
    if not hasSubscriptions(nil) then
        return
    end
    local newLazarus = getNewLazarus(nil, player)
    if not v.run.usedFlipAtLeastOnce then
        v.run.usedFlipAtLeastOnce = true
        postFirstFlip:fire(newLazarus)
    end
    postFlip:fire(newLazarus)
end
function getNewLazarus(self, oldLazarus)
    local oldCharacter = oldLazarus:GetPlayerType()
    local newCharacter
    if oldCharacter == PlayerType.PLAYER_LAZARUS_B then
        newCharacter = PlayerType.PLAYER_LAZARUS2_B
    elseif oldCharacter == PlayerType.PLAYER_LAZARUS2_B then
        newCharacter = PlayerType.PLAYER_LAZARUS_B
    else
        error("Failed to determine the character in the postFlip callback.")
    end
    for ____, player in ipairs(
        getPlayers(nil)
    ) do
        local character = player:GetPlayerType()
        if (character == newCharacter) and (player.FrameCount == oldLazarus.FrameCount) then
            return player
        end
    end
    error("Failed to find the player entity for the new Lazarus.")
    return oldLazarus
end
v = {run = {usedFlipAtLeastOnce = false}}
function ____exports.init(self, mod)
    saveDataManager(nil, "postFlipCallback", v, hasSubscriptions)
    mod:AddCallback(ModCallbacks.MC_USE_ITEM, useItemFlip, CollectibleType.COLLECTIBLE_FLIP)
end
return ____exports
