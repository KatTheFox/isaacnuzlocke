--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
require("lualib_bundle");
local ____exports = {}
local ____main = require("features.saveDataManager.main")
local saveDataManager = ____main.saveDataManager
local ____array = require("functions.array")
local arrayEmpty = ____array.arrayEmpty
local ____player = require("functions.player")
local getPlayerFromIndex = ____player.getPlayerFromIndex
local getPlayerIndex = ____player.getPlayerIndex
local postPlayerInitReordered = require("callbacks.subscriptions.postPlayerInitReordered")
local postPlayerRenderReordered = require("callbacks.subscriptions.postPlayerRenderReordered")
local postPlayerUpdateReordered = require("callbacks.subscriptions.postPlayerUpdateReordered")
local v, hasSubscriptions, postPlayerInit, postPlayerUpdate, postPlayerRender, postGameStarted, dequeue
function hasSubscriptions(self)
    return (postPlayerInitReordered:hasSubscriptions() or postPlayerUpdateReordered:hasSubscriptions()) or postPlayerRenderReordered:hasSubscriptions()
end
function postPlayerInit(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    if v.run.postGameStartedFiredOnThisRun then
        postPlayerInitReordered:fire(player)
    else
        local playerIndex = getPlayerIndex(nil, player)
        __TS__ArrayPush(v.run.postPlayerInitQueue, playerIndex)
    end
end
function postPlayerUpdate(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    if v.run.postGameStartedFiredOnThisRun then
        postPlayerUpdateReordered:fire(player)
    else
        local playerIndex = getPlayerIndex(nil, player)
        __TS__ArrayPush(v.run.postPlayerUpdateQueue, playerIndex)
    end
end
function postPlayerRender(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    if v.run.postGameStartedFiredOnThisRun then
        postPlayerRenderReordered:fire(player)
    else
        local playerIndex = getPlayerIndex(nil, player)
        __TS__ArrayPush(v.run.postPlayerRenderQueue, playerIndex)
    end
end
function postGameStarted(self)
    if not hasSubscriptions(nil) then
        return
    end
    v.run.postGameStartedFiredOnThisRun = true
    dequeue(nil, v.run.postPlayerInitQueue, postPlayerInitReordered.fire)
    dequeue(nil, v.run.postPlayerUpdateQueue, postPlayerUpdateReordered.fire)
    dequeue(nil, v.run.postPlayerRenderQueue, postPlayerRenderReordered.fire)
end
function dequeue(self, playerIndexes, fireFunction)
    for ____, playerIndex in ipairs(playerIndexes) do
        do
            local player = getPlayerFromIndex(nil, playerIndex)
            if player == nil then
                goto __continue19
            end
            fireFunction(nil, player)
        end
        ::__continue19::
    end
    arrayEmpty(nil, playerIndexes)
end
v = {run = {postGameStartedFiredOnThisRun = false, postPlayerInitQueue = {}, postPlayerUpdateQueue = {}, postPlayerRenderQueue = {}}}
function ____exports.init(self, mod)
    saveDataManager(nil, "postPlayerReordered", v, hasSubscriptions)
    mod:AddCallback(ModCallbacks.MC_POST_PLAYER_INIT, postPlayerInit)
    mod:AddCallback(ModCallbacks.MC_POST_PLAYER_UPDATE, postPlayerUpdate)
    mod:AddCallback(ModCallbacks.MC_POST_PLAYER_RENDER, postPlayerRender)
    mod:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, postGameStarted)
end
return ____exports
