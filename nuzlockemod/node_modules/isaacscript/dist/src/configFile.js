"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFile = exports.createObject = exports.get = void 0;
const chalk_1 = __importDefault(require("chalk"));
const JSONC = __importStar(require("jsonc-parser"));
const path_1 = __importDefault(require("path"));
const getModsDir_1 = __importDefault(require("./commands/init/getModsDir"));
const promptSaveSlot_1 = __importDefault(require("./commands/init/promptSaveSlot"));
const constants_1 = require("./constants");
const file = __importStar(require("./file"));
const misc_1 = require("./misc");
async function get(argv) {
    const existingConfig = readExistingConfig();
    if (existingConfig !== null) {
        return existingConfig;
    }
    // No config file exists, so prompt the user for some information and create one
    const modsDirectory = await getModsDir_1.default(argv);
    const saveSlot = await promptSaveSlot_1.default(argv);
    const config = createObject(modsDirectory, saveSlot);
    createFile(constants_1.CWD, config);
    return config;
}
exports.get = get;
function readExistingConfig() {
    if (!file.exists(constants_1.CONFIG_FILE_PATH)) {
        return null;
    }
    const configRaw = file.read(constants_1.CONFIG_FILE_PATH);
    let config;
    try {
        config = JSONC.parse(configRaw);
    }
    catch (err) {
        misc_1.error(`Failed to parse the "${chalk_1.default.green(constants_1.CONFIG_FILE_PATH)}" file:`, err);
    }
    if (config.modsDirectory === undefined) {
        errorMissing("modsDirectory", "This should be equal to the directory where Isaac mods live on your system.");
    }
    if (config.saveSlot === undefined) {
        errorMissing("saveSlot", "This should be equal to the save slot that you test your mods on.");
    }
    return config;
}
function errorMissing(field, description) {
    misc_1.error(`The "${constants_1.CONFIG_FILE_NAME}" file is missing a "${field}" value. ${description} Please add it.`);
}
function createObject(modsDirectory, saveSlot) {
    return {
        modsDirectory,
        saveSlot,
    };
}
exports.createObject = createObject;
function createFile(projectPath, config) {
    const configFilePath = path_1.default.join(projectPath, constants_1.CONFIG_FILE_NAME);
    const configContents = JSON.stringify(config, null, 2);
    file.write(configFilePath, configContents);
}
exports.createFile = createFile;
//# sourceMappingURL=configFile.js.map