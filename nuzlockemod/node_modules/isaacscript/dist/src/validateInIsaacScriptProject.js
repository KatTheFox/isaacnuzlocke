"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("./constants");
const file = __importStar(require("./file"));
// Validate that we are in a directory that looks like an IsaacScript project
function validateInIsaacScriptProject() {
    const subdirectoriesToCheck = ["src", "mod", "node_modules"];
    for (const subdirectoryName of subdirectoriesToCheck) {
        const subdirectoryPath = path_1.default.join(constants_1.CWD, subdirectoryName);
        if (!file.exists(subdirectoryPath) || !file.isDir(subdirectoryPath)) {
            errorNotExists(subdirectoryPath);
        }
    }
}
exports.default = validateInIsaacScriptProject;
function errorNotExists(dirName) {
    console.error(chalk_1.default.red(`It looks like the current working directory is not an IsaacScript project. (There is no "${dirName}" subdirectory here.)`));
    console.error(`Did you mean to create a new IsaacScript project with "${chalk_1.default.green("npx isaacscript init")}"?`);
    console.error("If not, then change the current working directory to an IsaacScript project.");
    process.exit(1);
}
//# sourceMappingURL=validateInIsaacScriptProject.js.map