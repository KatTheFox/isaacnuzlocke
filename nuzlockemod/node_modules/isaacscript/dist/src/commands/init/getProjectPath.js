"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const prompts_1 = __importDefault(require("prompts"));
const constants_1 = require("../../constants");
const misc_1 = require("../../misc");
// From: https://gist.github.com/doctaphred/d01d05291546186941e1b7ddc02034d3
const ILLEGAL_CHARACTERS_FOR_WINDOWS_FILENAMES = [
    "<",
    ">",
    ":",
    '"',
    "/",
    "\\",
    "|",
    "?",
    "*",
];
async function getProjectPath(argv) {
    let projectName = getProjectNameFromCommandLineArgument(argv);
    let projectPath;
    let createNewDir;
    if (argv.useCurrentDir !== undefined) {
        // The "--use-current-dir" command-line flag was specified,
        // so there is no need to prompt the user
        projectName = constants_1.CURRENT_DIRECTORY_NAME;
        projectPath = constants_1.CWD;
        createNewDir = false;
    }
    else if (projectName !== null) {
        // The project name was specified on the command-line
        projectPath = path_1.default.join(constants_1.CWD, projectName);
        createNewDir = true;
    }
    else {
        // The project name was not specified on the command-line, so prompt the user for it
        [projectName, projectPath, createNewDir] = await getNewProjectName();
    }
    if (!validateProjectName(projectName)) {
        process.exit(1);
    }
    console.log(`Using a project name of: ${chalk_1.default.green(projectName)}`);
    return [projectPath, createNewDir];
}
exports.default = getProjectPath;
function getProjectNameFromCommandLineArgument(argv) {
    return typeof argv.name === "string" && argv.name !== "" ? argv.name : null;
}
async function getNewProjectName() {
    console.log("You did not specify a project name as a command-line argument.");
    const response1 = await prompts_1.default({
        type: "confirm",
        name: "useCurrentDir",
        message: `Would you like to create a new project using the current directory "${chalk_1.default.green(constants_1.CURRENT_DIRECTORY_NAME)}" as the root?`,
        initial: true,
    });
    if (response1.useCurrentDir === true) {
        return [constants_1.CURRENT_DIRECTORY_NAME, constants_1.CWD, false];
    }
    const response2 = await prompts_1.default({
        type: "text",
        name: "projectName",
        message: "Enter the name of the project:",
    });
    if (typeof response2.projectName !== "string") {
        misc_1.error("Error: The response was not a string.");
    }
    const projectName = response2.projectName.trim();
    const projectPath = path_1.default.join(constants_1.CWD, projectName);
    return [projectName, projectPath, true];
}
function validateProjectName(projectName) {
    if (projectName === "") {
        console.error("Error: You cannot have a blank project name.");
        return false;
    }
    if (process.platform === "win32") {
        for (const character of ILLEGAL_CHARACTERS_FOR_WINDOWS_FILENAMES) {
            if (projectName.includes(character)) {
                console.error(`Error: The "${character}" character is not allowed in a Windows file name.`);
                return false;
            }
        }
    }
    if (misc_1.hasWhiteSpace(projectName)) {
        console.error('Error: The project name has whitespace in it, which is not allowed. Use kebab-case for your project name. (e.g. "green-candle")');
        return false;
    }
    return true;
}
//# sourceMappingURL=getProjectPath.js.map