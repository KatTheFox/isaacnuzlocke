"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const prompts_1 = __importDefault(require("prompts"));
const file = __importStar(require("../../file"));
const misc_1 = require("../../misc");
// https://stackoverflow.com/questions/9080085/node-js-find-home-directory-in-platform-agnostic-way
const homeDir = os_1.default.homedir();
const MODS = "mods";
const DEFAULT_MODS_PATH_WINDOWS = path_1.default.join("C:", "Program Files (x86)", "Steam", "steamapps", "common", "The Binding of Isaac Rebirth", MODS);
// This is a subdirectory of $HOME
const DEFAULT_MODS_PATH_LINUX = path_1.default.join(homeDir, ".local", "share", "Steam", "steamapps", "common", "The Binding of Isaac Rebirth", MODS);
async function getModsDir(argv) {
    if (argv.modsDirectory !== undefined) {
        // They specified the "--mods-directory" command-line flag,
        // so there is no need to prompt the user for it
        return argv.modsDirectory;
    }
    const defaultModsPath = getDefaultModsPath(process.platform);
    if (file.exists(defaultModsPath) && file.isDir(defaultModsPath)) {
        return defaultModsPath;
    }
    console.error(`Failed to find your mods directory at: ${chalk_1.default.green(defaultModsPath)}`);
    const response = await prompts_1.default({
        type: "text",
        name: "modsDir",
        message: `Enter the full path to the "${MODS}" directory on your system, which should be next to your "isaac-ng.exe" program:`,
    });
    if (typeof response.modsDir !== "string") {
        misc_1.error("Error: The response was not a string.");
    }
    const modsDir = response.modsDir.trim();
    if (!file.exists(modsDir)) {
        misc_1.error(`Error: The directory of "${chalk_1.default.green(modsDir)}" does not exist. Exiting.`);
    }
    if (!file.isDir(modsDir)) {
        misc_1.error(`Error: The path of "${chalk_1.default.green(modsDir)}" is not a directory. Exiting.`);
    }
    if (path_1.default.basename(modsDir) !== MODS) {
        misc_1.error(`Error: You entered a path of "${chalk_1.default.green(modsDir)}", but you need to input a directory with a name of "${MODS}" at the end. Exiting.`);
    }
    return modsDir;
}
exports.default = getModsDir;
function getDefaultModsPath(platform) {
    switch (platform) {
        case "win32": {
            return DEFAULT_MODS_PATH_WINDOWS;
        }
        case "linux": {
            return DEFAULT_MODS_PATH_LINUX;
        }
        default: {
            misc_1.error(`There does not exist a default mod path for the platform of: ${chalk_1.default.green(platform)}`);
            return "";
        }
    }
}
//# sourceMappingURL=getModsDir.js.map