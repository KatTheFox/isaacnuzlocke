"use strict";
/* eslint-disable import/no-unused-modules */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const JSONC = __importStar(require("jsonc-parser"));
const path_1 = __importDefault(require("path"));
const file = __importStar(require("../../../file"));
const misc_1 = require("../../../misc");
const MAX_MESSAGES = 100;
let saveDatPath;
let saveDatFileName;
init();
function init() {
    const numArgs = 1;
    if (process.argv.length !== 2 + numArgs) {
        throw new Error("The Save.dat writer process did not get the right amount of arguments.");
    }
    saveDatPath = process.argv[2];
    saveDatFileName = path_1.default.basename(saveDatPath);
    // Check to see if the data directory exists
    const watcherModDataPath = path_1.default.dirname(saveDatPath);
    if (!file.exists(watcherModDataPath)) {
        file.makeDir(watcherModDataPath);
    }
    // Listen for messages from the parent process
    process.on("message", (msg) => {
        onMessage(msg.type, msg.data);
    });
}
function onMessage(type, data, numRetries = 0) {
    const saveDat = readSaveDatFromDisk();
    if (saveDat.length > MAX_MESSAGES) {
        // If IsaacScript is running and
        // 1) the game is not open
        // 2) or the game is open but the IsaacScript Watcher mod is disabled
        // then this process will continue to write to the "save#.dat" file,
        // which can cause it to grow arbitrarily large
        // (since there is no-one on the other side removing the messages)
        // If there is N messages already in the queue,
        // assume that no-one is listening and stop adding any more messages
        return;
    }
    addMessageToSaveDat(type, saveDat, data); // Mutates saveDat
    writeSaveDatToDisk(type, data, numRetries, saveDat);
}
function readSaveDatFromDisk() {
    let saveDat;
    if (file.exists(saveDatPath)) {
        const saveDatRaw = file.read(saveDatPath);
        try {
            saveDat = JSONC.parse(saveDatRaw);
        }
        catch (err) {
            misc_1.error(`Failed to parse "${chalk_1.default.green(saveDatPath)}":`, err);
        }
    }
    else {
        saveDat = [];
    }
    if (!Array.isArray(saveDat)) {
        saveDat = [];
    }
    return saveDat;
}
function addMessageToSaveDat(type, saveDat, data) {
    switch (type) {
        case "command":
        case "ping": {
            saveDat.push({
                type,
                data,
            });
            break;
        }
        case "msg": {
            const lines = data.split("\n");
            for (const line of lines) {
                saveDat.push({
                    type,
                    data: line,
                });
            }
            break;
        }
        default: {
            misc_1.ensureAllCases(type);
            break;
        }
    }
}
function writeSaveDatToDisk(type, data, numRetries = 0, saveDat) {
    const saveDatRaw = JSON.stringify(saveDat, null, 2);
    try {
        file.writeTry(saveDatPath, saveDatRaw);
    }
    catch (err) {
        if (numRetries > 4) {
            console.error(`Failed to write to the ${saveDatFileName} for 5 times in a row. Maybe the file got locked somehow. IsaacScript will now exit.`);
            console.error("The writing error is as follows:");
            console.error(err);
            process.exit(1);
        }
        console.log(`Writing to "${saveDatFileName}" failed. (The number of retries so far is ${numRetries}.) Trying again in 0.1 seconds...`);
        setTimeout(() => {
            onMessage(type, data, numRetries + 1);
        }, 100);
    }
}
//# sourceMappingURL=saveDatWriter.js.map