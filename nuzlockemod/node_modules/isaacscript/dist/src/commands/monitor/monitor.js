"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const constants_1 = require("../../constants");
const file = __importStar(require("../../file"));
const misc_1 = require("../../misc");
const copyWatcherMod_1 = __importDefault(require("./copyWatcherMod"));
const getTSConfigInclude_1 = __importDefault(require("./getTSConfigInclude"));
const notifyGame = __importStar(require("./notifyGame"));
const spawnSaveDatWriter_1 = require("./spawnSaveDatWriter");
const touchSaveDatFiles_1 = __importDefault(require("./touchSaveDatFiles"));
function monitor(argv, config) {
    // If they specified some command-line flags, override the values found in the config file
    if (argv.modsDirectory !== undefined) {
        config.modsDirectory = argv.modsDirectory; // eslint-disable-line no-param-reassign
    }
    if (argv.saveSlot !== undefined) {
        config.saveSlot = argv.saveSlot; // eslint-disable-line no-param-reassign
    }
    // Prepare the watcher mod
    copyWatcherMod_1.default(config);
    // Ensure that the "save#.dat" file exists
    touchSaveDatFiles_1.default(config);
    // Subprocess #1 - The "save#.dat" file writer
    spawnSaveDatWriter_1.spawnSaveDatWriter(config);
    // Subprocess #2 - The mod directory syncer
    spawnModDirectorySyncer(config);
    // Subprocess #3 - tstl --watch (to automatically convert TypeScript to Lua)
    spawnTSTLWatcher();
    // Also, start constantly pinging the watcher mod
    setInterval(() => {
        notifyGame.ping();
    }, 1000); // Every second
    // Read the "tsconfig.json" file
    const tsConfigInclude = getTSConfigInclude_1.default();
    const resolvedIncludePath = path_1.default.resolve(constants_1.CWD, tsConfigInclude);
    const modTargetPath = path_1.default.join(config.modsDirectory, constants_1.CURRENT_DIRECTORY_NAME);
    console.log("Automatically monitoring the following for changes:");
    console.log(`1) your TypeScript code:     ${chalk_1.default.green(resolvedIncludePath)}`);
    console.log(`2) the source mod directory: ${chalk_1.default.green(constants_1.MOD_SOURCE_PATH)}`);
    console.log("");
    console.log(`Copying files to:            ${chalk_1.default.green(modTargetPath)}`);
    console.log("");
    // (the process will now continue indefinitely for as long as the subprocesses exist)
}
exports.default = monitor;
function spawnModDirectorySyncer(config) {
    const processName = "modDirectorySyncer";
    const processDescription = "Directory syncer";
    const processPath = path_1.default.join(__dirname, processName, processName);
    const modTargetPath = path_1.default.join(config.modsDirectory, constants_1.CURRENT_DIRECTORY_NAME);
    const directorySycner = child_process_1.fork(processPath, [constants_1.MOD_SOURCE_PATH, modTargetPath]);
    directorySycner.on("message", (msg) => {
        notifyGame.msg(msg);
        // If the "main.lua" file was successfully copied over, we also have to tell isaacscript-watcher
        // to reload the mod
        // Look for something like: "File synced: \main.lua"
        if (msg === `${constants_1.FILE_SYNCED_MESSAGE} ${path_1.default.sep}${constants_1.MAIN_LUA}`) {
            notifyGame.command(`luamod ${constants_1.CURRENT_DIRECTORY_NAME}`);
            notifyGame.command("restart");
            notifyGame.msg("Reloaded the mod.");
        }
    });
    directorySycner.on("close", (code) => {
        misc_1.error(`Error: ${processDescription} subprocess closed with code: ${code}`);
    });
    directorySycner.on("exit", (code) => {
        misc_1.error(`Error: ${processDescription} subprocess exited with code: ${code}`);
    });
}
function spawnTSTLWatcher() {
    // Fix the bug where tstl cannot be invoked if IsaacScript is specified as a local path in a mod's
    // package.json file
    const processDescription = "tstl";
    let tstl;
    if (runningFromLocalPath()) {
        const tstlPath = path_1.default.join(constants_1.CWD, "..", "isaacscript", "node_modules", "typescript-to-lua", "dist", "tstl.js");
        tstl = child_process_1.spawn("node", [tstlPath, "--watch", "--preserveWatchOutput"], {
            shell: true,
            cwd: constants_1.CWD,
        });
    }
    else {
        tstl = child_process_1.spawn("npx", ["tstl", "--watch", "--preserveWatchOutput"], {
            shell: true,
        });
    }
    tstl.stdout.on("data", (data) => {
        const msg = data.toString().trim();
        if (msg.includes("Starting compilation in watch mode...")) {
            const newMsg = "IsaacScript is now watching for changes.";
            notifyGame.msg(newMsg);
        }
        else if (msg.includes("File change detected. Starting incremental compilation...")) {
            const newMsg = "TypeScript change detected. Compiling...";
            notifyGame.msg(newMsg);
        }
        else if (msg.includes("Found 0 errors. Watching for file changes.")) {
            const newMsg = "Compilation successful.";
            notifyGame.msg(newMsg);
        }
        else {
            notifyGame.msg(msg);
        }
    });
    tstl.stderr.on("data", (data) => {
        const msg = data.toString().trim();
        if (msg === "^C") {
            // Hide the line that appears when you cancel the program with Ctrl + c
            return;
        }
        notifyGame.msg(`Error: ${msg}`);
    });
    tstl.on("close", (code) => {
        misc_1.error(`Error: ${processDescription} subprocess exited with code: ${code}`);
    });
    tstl.on("exit", (code) => {
        misc_1.error(`Error: ${processDescription} subprocess exited with code: ${code}`);
    });
}
// Returns whether or not IsaacScript is a local path in "package.json"
// e.g. "isaacscript": "../isaacscript"
function runningFromLocalPath() {
    const tstlDirPath = path_1.default.join(constants_1.CWD, "node_modules", "typescript-to-lua");
    return !file.exists(tstlDirPath);
}
//# sourceMappingURL=monitor.js.map